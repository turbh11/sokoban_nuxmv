MODULE main
VAR
    board: array 0..2 of array 0..4 of {"warehouse_keeper","warehouse_keeper_on_goal", "box", "box_on_goal", "wall", "goal", "floor"};
    shift: {"L" , "R" , "U" , "D" , 0};
    count_of_box_on_goals: 0..1;


ASSIGN
    init(board[0][0]) := "wall";
    init(board[0][1]) := "wall";
    init(board[0][2]) := "wall";
    init(board[0][3]) := "wall";
    init(board[0][4]) := "wall";
    init(board[1][0]) := "wall";
    init(board[1][1]) := "warehouse_keeper";
    init(board[1][2]) := "box";
    init(board[1][3]) := "goal";
    init(board[1][4]) := "wall";
    init(board[2][0]) := "wall";
    init(board[2][1]) := "wall";
    init(board[2][2]) := "wall";
    init(board[2][3]) := "wall";
    init(board[2][4]) := "wall";
    init(shift):= 0;
    init(count_of_box_on_goals) := 0;


DEFINE
    R_able[1][1] := (board[1][2] = "floor" ) | ((board[1][2] = "box" ) &  (board[1][3] = "goal"));
    R_able[1][2] := board[1][3] = "goal";
    L_able[1][2] := board[1][1] = "floor";
    L_able[1][3] := (board[1][2] = "floor" ) | ((board[1][2] = "box" ) &  (board[1][1] = "floor"));
    goal1 := case  -- for each goal/box on goal in init.
       board[1][3] = "box_on_goal" : 1;
       TRUE: 0;
    esac;
    solve := (goal1) = 1;


ASSIGN
next (shift) := { "U" , "D" , "L" , "R" };


-- Define the wall

next (board[0][0]) := (board[0][0]);
next (board[0][1]) := (board[0][1]);
next (board[0][2]) := (board[0][2]);
next (board[0][3]) := (board[0][3]);
next (board[0][4]) := (board[0][4]);
next (board[1][0]) := (board[1][0]);
next (board[1][4]) := (board[1][4]);
next (board[2][0]) := (board[2][0]);
next (board[2][1]) := (board[2][1]);
next (board[2][2]) := (board[2][2]);
next (board[2][3]) := (board[2][3]);
next (board[2][4]) := (board[2][4]);


-- Define the floor, box and warehouse keeper

next (board[1][1]) := case
    L_able[1][2] & next (shift) = "L" & board[1][2] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[1][1] & next (shift) = "R" & board[1][1] = "warehouse_keeper"  : {"floor"};
    L_able[1][3] & next (shift) = "L" & board[1][3] = "warehouse_keeper_on_goal" & board[1][2] = "box"  : {"box"};
TRUE : board[1][1];
esac;

next (board[1][2]) := case
    L_able[1][3] & next (shift) = "L" & board[1][3] = "warehouse_keeper_on_goal"  : {"warehouse_keeper"};
    R_able[1][2] & next (shift) = "R" & board[1][2] = "warehouse_keeper"  : {"floor"};
    R_able[1][1] & next (shift) = "R" & board[1][1] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[1][2] & next (shift) = "L" & board[1][2] = "warehouse_keeper"  : {"floor"};
TRUE : board[1][2];
esac;



-- Define the goal

next (board[1][3]) := case
    R_able[1][2] & next (shift) = "R" & board[1][2] = "warehouse_keeper"  : {"warehouse_keeper_on_goal"};
    L_able[1][3] & next (shift) = "L" & board[1][3] = "warehouse_keeper_on_goal"  : {"goal"};
    R_able[1][1] & next (shift) = "R" & board[1][1] = "warehouse_keeper" & board[1][2] = "box"  : {"box_on_goal"};
TRUE : board[1][3];
esac;

JUSTICE
!(board[1][1] = "box") &
 !(board[1][1] = "box" & board[1][2] = "box") &
!(board[1][2] = "box" & board[1][3] = "box");

LTLSPEC ! F solve

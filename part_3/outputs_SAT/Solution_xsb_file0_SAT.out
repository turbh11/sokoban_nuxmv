#####################
#### nuxmv command: nuXmv.exe -bmc -bmc_length 60 xsb_file0.smv ####
#### Execution time: 0.02025318145751953 seconds = 0:00:00.020253 ######
#### the solution steps are: R (1 steps) ####
#################


*** This is nuXmv 2.0.0 (compiled on Mon Oct 14 18:05:39 2019)
*** Copyright (c) 2014-2019, Fondazione Bruno Kessler
*** For more information on nuXmv see https://nuxmv.fbk.eu
*** or email to <nuxmv@list.fbk.eu>.
*** Please report bugs at https://nuxmv.fbk.eu/bugs
*** (click on "Login Anonymously" to access)
*** Alternatively write to <nuxmv@list.fbk.eu>.

*** This version of nuXmv is linked to NuSMV 2.6.0.
*** For more information on NuSMV see <http://nusmv.fbk.eu>
*** or email to <nusmv-users@list.fbk.eu>.
*** Copyright (C) 2010-2019, Fondazione Bruno Kessler

*** This version of nuXmv is linked to the CUDD library version 2.4.1
*** Copyright (c) 1995-2004, Regents of the University of Colorado

*** This version of nuXmv is linked to the MiniSat SAT solver. 
*** See http://minisat.se/MiniSat.html
*** Copyright (c) 2003-2006, Niklas Een, Niklas Sorensson
*** Copyright (c) 2007-2010, Niklas Sorensson

*** This version of nuXmv is linked to MathSAT
*** Copyright (C) 2009-2019 by Fondazione Bruno Kessler
*** Copyright (C) 2009-2019 by University of Trento and others
*** See http://mathsat.fbk.eu

-- no counterexample found with bound 0
-- no counterexample found with bound 1
-- specification !( F solve)    is false
-- as demonstrated by the following execution sequence
Trace Description: BMC Counterexample 
Trace Type: Counterexample 
  -> State: 1.1 <-
    board[0][0] = "wall"
    board[0][1] = "wall"
    board[0][2] = "wall"
    board[0][3] = "wall"
    board[0][4] = "wall"
    board[1][0] = "wall"
    board[1][1] = "warehouse_keeper"
    board[1][2] = "box"
    board[1][3] = "goal"
    board[1][4] = "wall"
    board[2][0] = "wall"
    board[2][1] = "wall"
    board[2][2] = "wall"
    board[2][3] = "wall"
    board[2][4] = "wall"
    shift = 0
    count_of_box_on_goals = 0
    solve = FALSE
    goal1 = 0
    L_able[1][3] = FALSE
    L_able[1][2] = FALSE
    R_able[1][2] = TRUE
    R_able[1][1] = TRUE
  -- Loop starts here
  -> State: 1.2 <-
    board[1][1] = "floor"
    board[1][2] = "warehouse_keeper"
    board[1][3] = "box_on_goal"
    shift = "R"
    solve = TRUE
    goal1 = 1
    L_able[1][2] = TRUE
    R_able[1][2] = FALSE
    R_able[1][1] = FALSE
  -> State: 1.3 <-

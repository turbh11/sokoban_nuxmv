MODULE main
VAR
    board: array 0..6 of array 0..6 of {"warehouse_keeper","warehouse_keeper_on_goal", "box", "box_on_goal", "wall", "goal", "floor"};
    shift: {"L" , "R" , "U" , "D" , 0};
    count_of_box_on_goals: 0..7;


ASSIGN
    init(board[0][0]) := "wall";
    init(board[0][1]) := "wall";
    init(board[0][2]) := "wall";
    init(board[0][3]) := "wall";
    init(board[0][4]) := "wall";
    init(board[0][5]) := "wall";
    init(board[0][6]) := "wall";
    init(board[1][0]) := "wall";
    init(board[1][1]) := "wall";
    init(board[1][2]) := "floor";
    init(board[1][3]) := "floor";
    init(board[1][4]) := "floor";
    init(board[1][5]) := "wall";
    init(board[1][6]) := "wall";
    init(board[2][0]) := "wall";
    init(board[2][1]) := "floor";
    init(board[2][2]) := "floor";
    init(board[2][3]) := "wall";
    init(board[2][4]) := "box";
    init(board[2][5]) := "floor";
    init(board[2][6]) := "wall";
    init(board[3][0]) := "wall";
    init(board[3][1]) := "floor";
    init(board[3][2]) := "box";
    init(board[3][3]) := "goal";
    init(board[3][4]) := "floor";
    init(board[3][5]) := "floor";
    init(board[3][6]) := "wall";
    init(board[4][0]) := "wall";
    init(board[4][1]) := "floor";
    init(board[4][2]) := "floor";
    init(board[4][3]) := "warehouse_keeper_on_goal";
    init(board[4][4]) := "floor";
    init(board[4][5]) := "floor";
    init(board[4][6]) := "wall";
    init(board[5][0]) := "wall";
    init(board[5][1]) := "wall";
    init(board[5][2]) := "floor";
    init(board[5][3]) := "box_on_goal";
    init(board[5][4]) := "floor";
    init(board[5][5]) := "wall";
    init(board[5][6]) := "wall";
    init(board[6][0]) := "wall";
    init(board[6][1]) := "wall";
    init(board[6][2]) := "wall";
    init(board[6][3]) := "wall";
    init(board[6][4]) := "wall";
    init(board[6][5]) := "wall";
    init(board[6][6]) := "wall";
    init(shift):= 0;
    init(count_of_box_on_goals) := 5;


DEFINE
    D_able[1][2] := (board[2][2] = "floor" ) | ((board[2][2] = "box" ) &  (board[3][2] = "floor"));
    R_able[1][2] := (board[1][3] = "floor" ) | ((board[1][3] = "box" ) &  (board[1][4] = "floor"));
    R_able[1][3] := board[1][4] = "floor";
    L_able[1][3] := board[1][2] = "floor";
    D_able[1][4] := (board[2][4] = "floor" ) | ((board[2][4] = "box" ) &  (board[3][4] = "floor"));
    L_able[1][4] := (board[1][3] = "floor" ) | ((board[1][3] = "box" ) &  (board[1][2] = "floor"));
    D_able[2][1] := (board[3][1] = "floor" ) | ((board[3][1] = "box" ) &  (board[4][1] = "floor"));
    R_able[2][1] := board[2][2] = "floor";
    U_able[2][2] := board[1][2] = "floor";
    D_able[2][2] := (board[3][2] = "floor" ) | ((board[3][2] = "box" ) &  (board[4][2] = "floor"));
    L_able[2][2] := board[2][1] = "floor";
    U_able[2][4] := board[1][4] = "floor";
    D_able[2][4] := (board[3][4] = "floor" ) | ((board[3][4] = "box" ) &  (board[4][4] = "floor"));
    R_able[2][4] := board[2][5] = "floor";
    D_able[2][5] := (board[3][5] = "floor" ) | ((board[3][5] = "box" ) &  (board[4][5] = "floor"));
    L_able[2][5] := board[2][4] = "floor";
    U_able[3][1] := board[2][1] = "floor";
    D_able[3][1] := board[4][1] = "floor";
    R_able[3][1] := (board[3][2] = "floor" ) | ((board[3][2] = "box" ) &  (board[3][3] = "goal"));
    U_able[3][2] := (board[2][2] = "floor" ) | ((board[2][2] = "box" ) &  (board[1][2] = "floor"));
    D_able[3][2] := (board[4][2] = "floor" ) | ((board[4][2] = "box" ) &  (board[5][2] = "floor"));
    R_able[3][2] := (board[3][3] = "goal" ) | ((board[3][3] = "box_on_goal" ) &  (board[3][4] = "floor"));
    L_able[3][2] := board[3][1] = "floor";
    D_able[3][3] := (board[4][3] = "goal" ) | ((board[4][3] = "box_on_goal" ) &  (board[5][3] = "goal"));
    R_able[3][3] := (board[3][4] = "floor" ) | ((board[3][4] = "box" ) &  (board[3][5] = "floor"));
    L_able[3][3] := (board[3][2] = "floor" ) | ((board[3][2] = "box" ) &  (board[3][1] = "floor"));
    U_able[3][4] := (board[2][4] = "floor" ) | ((board[2][4] = "box" ) &  (board[1][4] = "floor"));
    D_able[3][4] := (board[4][4] = "floor" ) | ((board[4][4] = "box" ) &  (board[5][4] = "floor"));
    R_able[3][4] := board[3][5] = "floor";
    L_able[3][4] := (board[3][3] = "goal" ) | ((board[3][3] = "box_on_goal" ) &  (board[3][2] = "floor"));
    U_able[3][5] := board[2][5] = "floor";
    D_able[3][5] := board[4][5] = "floor";
    L_able[3][5] := (board[3][4] = "floor" ) | ((board[3][4] = "box" ) &  (board[3][3] = "goal"));
    U_able[4][1] := (board[3][1] = "floor" ) | ((board[3][1] = "box" ) &  (board[2][1] = "floor"));
    R_able[4][1] := (board[4][2] = "floor" ) | ((board[4][2] = "box" ) &  (board[4][3] = "goal"));
    U_able[4][2] := (board[3][2] = "floor" ) | ((board[3][2] = "box" ) &  (board[2][2] = "floor"));
    D_able[4][2] := board[5][2] = "floor";
    R_able[4][2] := (board[4][3] = "goal" ) | ((board[4][3] = "box_on_goal" ) &  (board[4][4] = "floor"));
    L_able[4][2] := board[4][1] = "floor";
    U_able[4][3] := board[3][3] = "goal";
    D_able[4][3] := board[5][3] = "goal";
    R_able[4][3] := (board[4][4] = "floor" ) | ((board[4][4] = "box" ) &  (board[4][5] = "floor"));
    L_able[4][3] := (board[4][2] = "floor" ) | ((board[4][2] = "box" ) &  (board[4][1] = "floor"));
    U_able[4][4] := (board[3][4] = "floor" ) | ((board[3][4] = "box" ) &  (board[2][4] = "floor"));
    D_able[4][4] := board[5][4] = "floor";
    R_able[4][4] := board[4][5] = "floor";
    L_able[4][4] := (board[4][3] = "goal" ) | ((board[4][3] = "box_on_goal" ) &  (board[4][2] = "floor"));
    U_able[4][5] := (board[3][5] = "floor" ) | ((board[3][5] = "box" ) &  (board[2][5] = "floor"));
    L_able[4][5] := (board[4][4] = "floor" ) | ((board[4][4] = "box" ) &  (board[4][3] = "goal"));
    U_able[5][2] := (board[4][2] = "floor" ) | ((board[4][2] = "box" ) &  (board[3][2] = "floor"));
    R_able[5][2] := (board[5][3] = "goal" ) | ((board[5][3] = "box_on_goal" ) &  (board[5][4] = "floor"));
    U_able[5][3] := (board[4][3] = "goal" ) | ((board[4][3] = "box_on_goal" ) &  (board[3][3] = "goal"));
    R_able[5][3] := board[5][4] = "floor";
    L_able[5][3] := board[5][2] = "floor";
    U_able[5][4] := (board[4][4] = "floor" ) | ((board[4][4] = "box" ) &  (board[3][4] = "floor"));
    L_able[5][4] := (board[5][3] = "goal" ) | ((board[5][3] = "box_on_goal" ) &  (board[5][2] = "floor"));
    goal1 := case  -- for each goal/box on goal in init.
       board[3][3] = "box_on_goal" : 1;
       TRUE: 0;
    esac;
    goal2 := case  -- for each goal/box on goal in init.
       board[4][3] = "box_on_goal" : 1;
       TRUE: 0;
    esac;
    goal3 := case  -- for each goal/box on goal in init.
       board[5][3] = "box_on_goal" : 5;
       TRUE: 0;
    esac;
    solve := (goal1 + goal2 + goal3) > 5;


ASSIGN
next (shift) := { "U" , "D" , "L" , "R" };


-- Define the wall

next (board[0][0]) := (board[0][0]);
next (board[0][1]) := (board[0][1]);
next (board[0][2]) := (board[0][2]);
next (board[0][3]) := (board[0][3]);
next (board[0][4]) := (board[0][4]);
next (board[0][5]) := (board[0][5]);
next (board[0][6]) := (board[0][6]);
next (board[1][0]) := (board[1][0]);
next (board[1][1]) := (board[1][1]);
next (board[1][5]) := (board[1][5]);
next (board[1][6]) := (board[1][6]);
next (board[2][0]) := (board[2][0]);
next (board[2][3]) := (board[2][3]);
next (board[2][6]) := (board[2][6]);
next (board[3][0]) := (board[3][0]);
next (board[3][6]) := (board[3][6]);
next (board[4][0]) := (board[4][0]);
next (board[4][6]) := (board[4][6]);
next (board[5][0]) := (board[5][0]);
next (board[5][1]) := (board[5][1]);
next (board[5][5]) := (board[5][5]);
next (board[5][6]) := (board[5][6]);
next (board[6][0]) := (board[6][0]);
next (board[6][1]) := (board[6][1]);
next (board[6][2]) := (board[6][2]);
next (board[6][3]) := (board[6][3]);
next (board[6][4]) := (board[6][4]);
next (board[6][5]) := (board[6][5]);
next (board[6][6]) := (board[6][6]);


-- Define the floor, box and warehouse keeper

next (board[1][2]) := case
    U_able[2][2] & next (shift) = "U" & board[2][2] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[1][2] & next (shift) = "D" & board[1][2] = "warehouse_keeper"  : {"floor"};
    U_able[3][2] & next (shift) = "U" & board[3][2] = "warehouse_keeper" & board[2][2] = "box"  : {"box"};
    L_able[1][3] & next (shift) = "L" & board[1][3] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[1][2] & next (shift) = "R" & board[1][2] = "warehouse_keeper"  : {"floor"};
    L_able[1][4] & next (shift) = "L" & board[1][4] = "warehouse_keeper" & board[1][3] = "box"  : {"box"};
TRUE : board[1][2];
esac;

next (board[1][3]) := case
    L_able[1][4] & next (shift) = "L" & board[1][4] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[1][3] & next (shift) = "R" & board[1][3] = "warehouse_keeper"  : {"floor"};
    R_able[1][2] & next (shift) = "R" & board[1][2] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[1][3] & next (shift) = "L" & board[1][3] = "warehouse_keeper"  : {"floor"};
TRUE : board[1][3];
esac;

next (board[1][4]) := case
    U_able[2][4] & next (shift) = "U" & board[2][4] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[1][4] & next (shift) = "D" & board[1][4] = "warehouse_keeper"  : {"floor"};
    U_able[3][4] & next (shift) = "U" & board[3][4] = "warehouse_keeper" & board[2][4] = "box"  : {"box"};
    R_able[1][3] & next (shift) = "R" & board[1][3] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[1][4] & next (shift) = "L" & board[1][4] = "warehouse_keeper"  : {"floor"};
    R_able[1][2] & next (shift) = "R" & board[1][2] = "warehouse_keeper" & board[1][3] = "box"  : {"box"};
TRUE : board[1][4];
esac;

next (board[2][1]) := case
    U_able[3][1] & next (shift) = "U" & board[3][1] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[2][1] & next (shift) = "D" & board[2][1] = "warehouse_keeper"  : {"floor"};
    U_able[4][1] & next (shift) = "U" & board[4][1] = "warehouse_keeper" & board[3][1] = "box"  : {"box"};
    L_able[2][2] & next (shift) = "L" & board[2][2] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[2][1] & next (shift) = "R" & board[2][1] = "warehouse_keeper"  : {"floor"};
TRUE : board[2][1];
esac;

next (board[2][2]) := case
    U_able[3][2] & next (shift) = "U" & board[3][2] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[2][2] & next (shift) = "D" & board[2][2] = "warehouse_keeper"  : {"floor"};
    U_able[4][2] & next (shift) = "U" & board[4][2] = "warehouse_keeper" & board[3][2] = "box"  : {"box"};
    D_able[1][2] & next (shift) = "D" & board[1][2] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[2][2] & next (shift) = "U" & board[2][2] = "warehouse_keeper"  : {"floor"};
    R_able[2][1] & next (shift) = "R" & board[2][1] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[2][2] & next (shift) = "L" & board[2][2] = "warehouse_keeper"  : {"floor"};
TRUE : board[2][2];
esac;

next (board[2][4]) := case
    U_able[3][4] & next (shift) = "U" & board[3][4] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[2][4] & next (shift) = "D" & board[2][4] = "warehouse_keeper"  : {"floor"};
    U_able[4][4] & next (shift) = "U" & board[4][4] = "warehouse_keeper" & board[3][4] = "box"  : {"box"};
    D_able[1][4] & next (shift) = "D" & board[1][4] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[2][4] & next (shift) = "U" & board[2][4] = "warehouse_keeper"  : {"floor"};
    L_able[2][5] & next (shift) = "L" & board[2][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[2][4] & next (shift) = "R" & board[2][4] = "warehouse_keeper"  : {"floor"};
TRUE : board[2][4];
esac;

next (board[2][5]) := case
    U_able[3][5] & next (shift) = "U" & board[3][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[2][5] & next (shift) = "D" & board[2][5] = "warehouse_keeper"  : {"floor"};
    U_able[4][5] & next (shift) = "U" & board[4][5] = "warehouse_keeper" & board[3][5] = "box"  : {"box"};
    R_able[2][4] & next (shift) = "R" & board[2][4] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[2][5] & next (shift) = "L" & board[2][5] = "warehouse_keeper"  : {"floor"};
TRUE : board[2][5];
esac;

next (board[3][1]) := case
    U_able[4][1] & next (shift) = "U" & board[4][1] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[3][1] & next (shift) = "D" & board[3][1] = "warehouse_keeper"  : {"floor"};
    D_able[2][1] & next (shift) = "D" & board[2][1] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[3][1] & next (shift) = "U" & board[3][1] = "warehouse_keeper"  : {"floor"};
    L_able[3][2] & next (shift) = "L" & board[3][2] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[3][1] & next (shift) = "R" & board[3][1] = "warehouse_keeper"  : {"floor"};
    L_able[3][3] & next (shift) = "L" & board[3][3] = "warehouse_keeper_on_goal" & board[3][2] = "box"  : {"box"};
TRUE : board[3][1];
esac;

next (board[3][2]) := case
    U_able[4][2] & next (shift) = "U" & board[4][2] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[3][2] & next (shift) = "D" & board[3][2] = "warehouse_keeper"  : {"floor"};
    U_able[5][2] & next (shift) = "U" & board[5][2] = "warehouse_keeper" & board[4][2] = "box"  : {"box"};
    D_able[2][2] & next (shift) = "D" & board[2][2] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[3][2] & next (shift) = "U" & board[3][2] = "warehouse_keeper"  : {"floor"};
    D_able[1][2] & next (shift) = "D" & board[1][2] = "warehouse_keeper" & board[2][2] = "box"  : {"box"};
    L_able[3][3] & next (shift) = "L" & board[3][3] = "warehouse_keeper_on_goal"  : {"warehouse_keeper"};
    R_able[3][2] & next (shift) = "R" & board[3][2] = "warehouse_keeper"  : {"floor"};
    L_able[3][4] & next (shift) = "L" & board[3][4] = "warehouse_keeper" & board[3][3] = "box_on_goal"  : {"box"};
    R_able[3][1] & next (shift) = "R" & board[3][1] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[3][2] & next (shift) = "L" & board[3][2] = "warehouse_keeper"  : {"floor"};
TRUE : board[3][2];
esac;

next (board[3][4]) := case
    U_able[4][4] & next (shift) = "U" & board[4][4] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[3][4] & next (shift) = "D" & board[3][4] = "warehouse_keeper"  : {"floor"};
    U_able[5][4] & next (shift) = "U" & board[5][4] = "warehouse_keeper" & board[4][4] = "box"  : {"box"};
    D_able[2][4] & next (shift) = "D" & board[2][4] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[3][4] & next (shift) = "U" & board[3][4] = "warehouse_keeper"  : {"floor"};
    D_able[1][4] & next (shift) = "D" & board[1][4] = "warehouse_keeper" & board[2][4] = "box"  : {"box"};
    L_able[3][5] & next (shift) = "L" & board[3][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[3][4] & next (shift) = "R" & board[3][4] = "warehouse_keeper"  : {"floor"};
    R_able[3][3] & next (shift) = "R" & board[3][3] = "warehouse_keeper_on_goal"  : {"warehouse_keeper"};
    L_able[3][4] & next (shift) = "L" & board[3][4] = "warehouse_keeper"  : {"floor"};
    R_able[3][2] & next (shift) = "R" & board[3][2] = "warehouse_keeper" & board[3][3] = "box_on_goal"  : {"box"};
TRUE : board[3][4];
esac;

next (board[3][5]) := case
    U_able[4][5] & next (shift) = "U" & board[4][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[3][5] & next (shift) = "D" & board[3][5] = "warehouse_keeper"  : {"floor"};
    D_able[2][5] & next (shift) = "D" & board[2][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[3][5] & next (shift) = "U" & board[3][5] = "warehouse_keeper"  : {"floor"};
    R_able[3][4] & next (shift) = "R" & board[3][4] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[3][5] & next (shift) = "L" & board[3][5] = "warehouse_keeper"  : {"floor"};
    R_able[3][3] & next (shift) = "R" & board[3][3] = "warehouse_keeper_on_goal" & board[3][4] = "box"  : {"box"};
TRUE : board[3][5];
esac;

next (board[4][1]) := case
    D_able[3][1] & next (shift) = "D" & board[3][1] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[4][1] & next (shift) = "U" & board[4][1] = "warehouse_keeper"  : {"floor"};
    D_able[2][1] & next (shift) = "D" & board[2][1] = "warehouse_keeper" & board[3][1] = "box"  : {"box"};
    L_able[4][2] & next (shift) = "L" & board[4][2] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[4][1] & next (shift) = "R" & board[4][1] = "warehouse_keeper"  : {"floor"};
    L_able[4][3] & next (shift) = "L" & board[4][3] = "warehouse_keeper_on_goal" & board[4][2] = "box"  : {"box"};
TRUE : board[4][1];
esac;

next (board[4][2]) := case
    U_able[5][2] & next (shift) = "U" & board[5][2] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[4][2] & next (shift) = "D" & board[4][2] = "warehouse_keeper"  : {"floor"};
    D_able[3][2] & next (shift) = "D" & board[3][2] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[4][2] & next (shift) = "U" & board[4][2] = "warehouse_keeper"  : {"floor"};
    D_able[2][2] & next (shift) = "D" & board[2][2] = "warehouse_keeper" & board[3][2] = "box"  : {"box"};
    L_able[4][3] & next (shift) = "L" & board[4][3] = "warehouse_keeper_on_goal"  : {"warehouse_keeper"};
    R_able[4][2] & next (shift) = "R" & board[4][2] = "warehouse_keeper"  : {"floor"};
    L_able[4][4] & next (shift) = "L" & board[4][4] = "warehouse_keeper" & board[4][3] = "box_on_goal"  : {"box"};
    R_able[4][1] & next (shift) = "R" & board[4][1] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[4][2] & next (shift) = "L" & board[4][2] = "warehouse_keeper"  : {"floor"};
TRUE : board[4][2];
esac;

next (board[4][4]) := case
    U_able[5][4] & next (shift) = "U" & board[5][4] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[4][4] & next (shift) = "D" & board[4][4] = "warehouse_keeper"  : {"floor"};
    D_able[3][4] & next (shift) = "D" & board[3][4] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[4][4] & next (shift) = "U" & board[4][4] = "warehouse_keeper"  : {"floor"};
    D_able[2][4] & next (shift) = "D" & board[2][4] = "warehouse_keeper" & board[3][4] = "box"  : {"box"};
    L_able[4][5] & next (shift) = "L" & board[4][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[4][4] & next (shift) = "R" & board[4][4] = "warehouse_keeper"  : {"floor"};
    R_able[4][3] & next (shift) = "R" & board[4][3] = "warehouse_keeper_on_goal"  : {"warehouse_keeper"};
    L_able[4][4] & next (shift) = "L" & board[4][4] = "warehouse_keeper"  : {"floor"};
    R_able[4][2] & next (shift) = "R" & board[4][2] = "warehouse_keeper" & board[4][3] = "box_on_goal"  : {"box"};
TRUE : board[4][4];
esac;

next (board[4][5]) := case
    D_able[3][5] & next (shift) = "D" & board[3][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[4][5] & next (shift) = "U" & board[4][5] = "warehouse_keeper"  : {"floor"};
    D_able[2][5] & next (shift) = "D" & board[2][5] = "warehouse_keeper" & board[3][5] = "box"  : {"box"};
    R_able[4][4] & next (shift) = "R" & board[4][4] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[4][5] & next (shift) = "L" & board[4][5] = "warehouse_keeper"  : {"floor"};
    R_able[4][3] & next (shift) = "R" & board[4][3] = "warehouse_keeper_on_goal" & board[4][4] = "box"  : {"box"};
TRUE : board[4][5];
esac;

next (board[5][2]) := case
    D_able[4][2] & next (shift) = "D" & board[4][2] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[5][2] & next (shift) = "U" & board[5][2] = "warehouse_keeper"  : {"floor"};
    D_able[3][2] & next (shift) = "D" & board[3][2] = "warehouse_keeper" & board[4][2] = "box"  : {"box"};
    L_able[5][3] & next (shift) = "L" & board[5][3] = "warehouse_keeper_on_goal"  : {"warehouse_keeper"};
    R_able[5][2] & next (shift) = "R" & board[5][2] = "warehouse_keeper"  : {"floor"};
    L_able[5][4] & next (shift) = "L" & board[5][4] = "warehouse_keeper" & board[5][3] = "box_on_goal"  : {"box"};
TRUE : board[5][2];
esac;

next (board[5][4]) := case
    D_able[4][4] & next (shift) = "D" & board[4][4] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[5][4] & next (shift) = "U" & board[5][4] = "warehouse_keeper"  : {"floor"};
    D_able[3][4] & next (shift) = "D" & board[3][4] = "warehouse_keeper" & board[4][4] = "box"  : {"box"};
    R_able[5][3] & next (shift) = "R" & board[5][3] = "warehouse_keeper_on_goal"  : {"warehouse_keeper"};
    L_able[5][4] & next (shift) = "L" & board[5][4] = "warehouse_keeper"  : {"floor"};
    R_able[5][2] & next (shift) = "R" & board[5][2] = "warehouse_keeper" & board[5][3] = "box_on_goal"  : {"box"};
TRUE : board[5][4];
esac;



-- Define the goal

next (board[3][3]) := case
    U_able[4][3] & next (shift) = "U" & board[4][3] = "warehouse_keeper_on_goal"  : {"warehouse_keeper_on_goal"};
    D_able[3][3] & next (shift) = "D" & board[3][3] = "warehouse_keeper_on_goal"  : {"goal"};
    U_able[5][3] & next (shift) = "U" & board[5][3] = "warehouse_keeper_on_goal" & board[4][3] = "box_on_goal"  : {"box_on_goal"};
    L_able[3][4] & next (shift) = "L" & board[3][4] = "warehouse_keeper"  : {"warehouse_keeper_on_goal"};
    R_able[3][3] & next (shift) = "R" & board[3][3] = "warehouse_keeper_on_goal"  : {"goal"};
    L_able[3][5] & next (shift) = "L" & board[3][5] = "warehouse_keeper" & board[3][4] = "box"  : {"box_on_goal"};
    R_able[3][2] & next (shift) = "R" & board[3][2] = "warehouse_keeper"  : {"warehouse_keeper_on_goal"};
    L_able[3][3] & next (shift) = "L" & board[3][3] = "warehouse_keeper_on_goal"  : {"goal"};
    R_able[3][1] & next (shift) = "R" & board[3][1] = "warehouse_keeper" & board[3][2] = "box"  : {"box_on_goal"};
TRUE : board[3][3];
esac;

next (board[4][3]) := case
    U_able[5][3] & next (shift) = "U" & board[5][3] = "warehouse_keeper_on_goal"  : {"warehouse_keeper_on_goal"};
    D_able[4][3] & next (shift) = "D" & board[4][3] = "warehouse_keeper_on_goal"  : {"goal"};
    D_able[3][3] & next (shift) = "D" & board[3][3] = "warehouse_keeper_on_goal"  : {"warehouse_keeper_on_goal"};
    U_able[4][3] & next (shift) = "U" & board[4][3] = "warehouse_keeper_on_goal"  : {"goal"};
    L_able[4][4] & next (shift) = "L" & board[4][4] = "warehouse_keeper"  : {"warehouse_keeper_on_goal"};
    R_able[4][3] & next (shift) = "R" & board[4][3] = "warehouse_keeper_on_goal"  : {"goal"};
    L_able[4][5] & next (shift) = "L" & board[4][5] = "warehouse_keeper" & board[4][4] = "box"  : {"box_on_goal"};
    R_able[4][2] & next (shift) = "R" & board[4][2] = "warehouse_keeper"  : {"warehouse_keeper_on_goal"};
    L_able[4][3] & next (shift) = "L" & board[4][3] = "warehouse_keeper_on_goal"  : {"goal"};
    R_able[4][1] & next (shift) = "R" & board[4][1] = "warehouse_keeper" & board[4][2] = "box"  : {"box_on_goal"};
TRUE : board[4][3];
esac;

next (board[5][3]) := case
    D_able[4][3] & next (shift) = "D" & board[4][3] = "warehouse_keeper_on_goal"  : {"warehouse_keeper_on_goal"};
    U_able[5][3] & next (shift) = "U" & board[5][3] = "warehouse_keeper_on_goal"  : {"goal"};
    D_able[3][3] & next (shift) = "D" & board[3][3] = "warehouse_keeper_on_goal" & board[4][3] = "box_on_goal"  : {"box_on_goal"};
    L_able[5][4] & next (shift) = "L" & board[5][4] = "warehouse_keeper"  : {"warehouse_keeper_on_goal"};
    R_able[5][3] & next (shift) = "R" & board[5][3] = "warehouse_keeper_on_goal"  : {"goal"};
    R_able[5][2] & next (shift) = "R" & board[5][2] = "warehouse_keeper"  : {"warehouse_keeper_on_goal"};
    L_able[5][3] & next (shift) = "L" & board[5][3] = "warehouse_keeper_on_goal"  : {"goal"};
TRUE : board[5][3];
esac;

JUSTICE
!(board[1][2] = "box") &
 !(board[1][4] = "box") &
 !(board[2][1] = "box") &
 !(board[2][5] = "box") &
 !(board[4][1] = "box") &
 !(board[4][5] = "box") &
 !(board[5][2] = "box") &
 !(board[5][4] = "box") &
 !(board[1][3] = "box") &
 !(board[3][1] = "box") &
 !(board[3][5] = "box") &
 !(board[1][2] = "box" & board[1][3] = "box") &
 !(board[1][3] = "box" & board[1][4] = "box") &
 !(board[2][1] = "box" & board[3][1] = "box") &
 !(board[2][5] = "box" & board[3][5] = "box") &
 !(board[3][1] = "box" & board[4][1] = "box") &
 !(board[3][5] = "box" & board[4][5] = "box") &
 !(board[5][2] = "box" & board[5][3] = "box") &
!(board[5][3] = "box" & board[5][4] = "box");

LTLSPEC ! F solve

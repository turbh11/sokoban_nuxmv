MODULE main
VAR
    board: array 0..10 of array 0..18 of {"warehouse_keeper","warehouse_keeper_on_goal", "box", "box_on_goal", "wall", "goal", "floor"};
    shift: {"L" , "R" , "U" , "D" , 0};
    count_of_box_on_goals: 0..33;


ASSIGN
    init(board[0][0]) := "wall";
    init(board[0][1]) := "wall";
    init(board[0][2]) := "wall";
    init(board[0][3]) := "wall";
    init(board[0][4]) := "wall";
    init(board[0][5]) := "wall";
    init(board[0][6]) := "wall";
    init(board[0][7]) := "wall";
    init(board[0][8]) := "wall";
    init(board[0][9]) := "wall";
    init(board[0][10]) := "wall";
    init(board[0][11]) := "wall";
    init(board[0][12]) := "wall";
    init(board[0][13]) := "wall";
    init(board[0][14]) := "wall";
    init(board[0][15]) := "wall";
    init(board[0][16]) := "wall";
    init(board[0][17]) := "wall";
    init(board[0][18]) := "wall";
    init(board[1][0]) := "wall";
    init(board[1][1]) := "wall";
    init(board[1][2]) := "wall";
    init(board[1][3]) := "wall";
    init(board[1][4]) := "wall";
    init(board[1][5]) := "floor";
    init(board[1][6]) := "floor";
    init(board[1][7]) := "floor";
    init(board[1][8]) := "wall";
    init(board[1][9]) := "wall";
    init(board[1][10]) := "wall";
    init(board[1][11]) := "wall";
    init(board[1][12]) := "wall";
    init(board[1][13]) := "wall";
    init(board[1][14]) := "wall";
    init(board[1][15]) := "wall";
    init(board[1][16]) := "wall";
    init(board[1][17]) := "wall";
    init(board[1][18]) := "wall";
    init(board[2][0]) := "wall";
    init(board[2][1]) := "wall";
    init(board[2][2]) := "wall";
    init(board[2][3]) := "wall";
    init(board[2][4]) := "wall";
    init(board[2][5]) := "box";
    init(board[2][6]) := "floor";
    init(board[2][7]) := "box";
    init(board[2][8]) := "wall";
    init(board[2][9]) := "wall";
    init(board[2][10]) := "wall";
    init(board[2][11]) := "wall";
    init(board[2][12]) := "wall";
    init(board[2][13]) := "wall";
    init(board[2][14]) := "wall";
    init(board[2][15]) := "wall";
    init(board[2][16]) := "wall";
    init(board[2][17]) := "wall";
    init(board[2][18]) := "wall";
    init(board[3][0]) := "wall";
    init(board[3][1]) := "wall";
    init(board[3][2]) := "wall";
    init(board[3][3]) := "wall";
    init(board[3][4]) := "wall";
    init(board[3][5]) := "floor";
    init(board[3][6]) := "floor";
    init(board[3][7]) := "floor";
    init(board[3][8]) := "wall";
    init(board[3][9]) := "wall";
    init(board[3][10]) := "wall";
    init(board[3][11]) := "wall";
    init(board[3][12]) := "wall";
    init(board[3][13]) := "wall";
    init(board[3][14]) := "wall";
    init(board[3][15]) := "wall";
    init(board[3][16]) := "wall";
    init(board[3][17]) := "wall";
    init(board[3][18]) := "wall";
    init(board[4][0]) := "wall";
    init(board[4][1]) := "wall";
    init(board[4][2]) := "wall";
    init(board[4][3]) := "floor";
    init(board[4][4]) := "floor";
    init(board[4][5]) := "floor";
    init(board[4][6]) := "box";
    init(board[4][7]) := "floor";
    init(board[4][8]) := "floor";
    init(board[4][9]) := "wall";
    init(board[4][10]) := "wall";
    init(board[4][11]) := "wall";
    init(board[4][12]) := "wall";
    init(board[4][13]) := "wall";
    init(board[4][14]) := "wall";
    init(board[4][15]) := "wall";
    init(board[4][16]) := "wall";
    init(board[4][17]) := "wall";
    init(board[4][18]) := "wall";
    init(board[5][0]) := "wall";
    init(board[5][1]) := "wall";
    init(board[5][2]) := "wall";
    init(board[5][3]) := "floor";
    init(board[5][4]) := "wall";
    init(board[5][5]) := "floor";
    init(board[5][6]) := "wall";
    init(board[5][7]) := "wall";
    init(board[5][8]) := "floor";
    init(board[5][9]) := "wall";
    init(board[5][10]) := "wall";
    init(board[5][11]) := "wall";
    init(board[5][12]) := "wall";
    init(board[5][13]) := "wall";
    init(board[5][14]) := "wall";
    init(board[5][15]) := "wall";
    init(board[5][16]) := "wall";
    init(board[5][17]) := "wall";
    init(board[5][18]) := "wall";
    init(board[6][0]) := "wall";
    init(board[6][1]) := "floor";
    init(board[6][2]) := "floor";
    init(board[6][3]) := "floor";
    init(board[6][4]) := "wall";
    init(board[6][5]) := "floor";
    init(board[6][6]) := "wall";
    init(board[6][7]) := "wall";
    init(board[6][8]) := "floor";
    init(board[6][9]) := "wall";
    init(board[6][10]) := "wall";
    init(board[6][11]) := "wall";
    init(board[6][12]) := "wall";
    init(board[6][13]) := "wall";
    init(board[6][14]) := "floor";
    init(board[6][15]) := "floor";
    init(board[6][16]) := "goal";
    init(board[6][17]) := "box_on_goal";
    init(board[6][18]) := "wall";
    init(board[7][0]) := "wall";
    init(board[7][1]) := "floor";
    init(board[7][2]) := "floor";
    init(board[7][3]) := "floor";
    init(board[7][4]) := "floor";
    init(board[7][5]) := "floor";
    init(board[7][6]) := "floor";
    init(board[7][7]) := "floor";
    init(board[7][8]) := "floor";
    init(board[7][9]) := "floor";
    init(board[7][10]) := "floor";
    init(board[7][11]) := "floor";
    init(board[7][12]) := "floor";
    init(board[7][13]) := "floor";
    init(board[7][14]) := "floor";
    init(board[7][15]) := "warehouse_keeper";
    init(board[7][16]) := "box_on_goal";
    init(board[7][17]) := "box_on_goal";
    init(board[7][18]) := "wall";
    init(board[8][0]) := "wall";
    init(board[8][1]) := "wall";
    init(board[8][2]) := "wall";
    init(board[8][3]) := "wall";
    init(board[8][4]) := "wall";
    init(board[8][5]) := "floor";
    init(board[8][6]) := "wall";
    init(board[8][7]) := "wall";
    init(board[8][8]) := "wall";
    init(board[8][9]) := "floor";
    init(board[8][10]) := "wall";
    init(board[8][11]) := "floor";
    init(board[8][12]) := "wall";
    init(board[8][13]) := "wall";
    init(board[8][14]) := "floor";
    init(board[8][15]) := "floor";
    init(board[8][16]) := "goal";
    init(board[8][17]) := "goal";
    init(board[8][18]) := "wall";
    init(board[9][0]) := "wall";
    init(board[9][1]) := "wall";
    init(board[9][2]) := "wall";
    init(board[9][3]) := "wall";
    init(board[9][4]) := "wall";
    init(board[9][5]) := "floor";
    init(board[9][6]) := "floor";
    init(board[9][7]) := "floor";
    init(board[9][8]) := "floor";
    init(board[9][9]) := "floor";
    init(board[9][10]) := "wall";
    init(board[9][11]) := "wall";
    init(board[9][12]) := "wall";
    init(board[9][13]) := "wall";
    init(board[9][14]) := "wall";
    init(board[9][15]) := "wall";
    init(board[9][16]) := "wall";
    init(board[9][17]) := "wall";
    init(board[9][18]) := "wall";
    init(board[10][0]) := "wall";
    init(board[10][1]) := "wall";
    init(board[10][2]) := "wall";
    init(board[10][3]) := "wall";
    init(board[10][4]) := "wall";
    init(board[10][5]) := "wall";
    init(board[10][6]) := "wall";
    init(board[10][7]) := "wall";
    init(board[10][8]) := "wall";
    init(board[10][9]) := "wall";
    init(board[10][10]) := "wall";
    init(board[10][11]) := "wall";
    init(board[10][12]) := "wall";
    init(board[10][13]) := "wall";
    init(board[10][14]) := "wall";
    init(board[10][15]) := "wall";
    init(board[10][16]) := "wall";
    init(board[10][17]) := "wall";
    init(board[10][18]) := "wall";
    init(shift):= 0;
    init(count_of_box_on_goals) := 17;


DEFINE
    D_able[1][5] := (board[2][5] = "floor" ) | ((board[2][5] = "box" ) &  (board[3][5] = "floor"));
    R_able[1][5] := (board[1][6] = "floor" ) | ((board[1][6] = "box" ) &  (board[1][7] = "floor"));
    D_able[1][6] := (board[2][6] = "floor" ) | ((board[2][6] = "box" ) &  (board[3][6] = "floor"));
    R_able[1][6] := board[1][7] = "floor";
    L_able[1][6] := board[1][5] = "floor";
    D_able[1][7] := (board[2][7] = "floor" ) | ((board[2][7] = "box" ) &  (board[3][7] = "floor"));
    L_able[1][7] := (board[1][6] = "floor" ) | ((board[1][6] = "box" ) &  (board[1][5] = "floor"));
    U_able[2][5] := board[1][5] = "floor";
    D_able[2][5] := (board[3][5] = "floor" ) | ((board[3][5] = "box" ) &  (board[4][5] = "floor"));
    R_able[2][5] := (board[2][6] = "floor" ) | ((board[2][6] = "box" ) &  (board[2][7] = "floor"));
    U_able[2][6] := board[1][6] = "floor";
    D_able[2][6] := (board[3][6] = "floor" ) | ((board[3][6] = "box" ) &  (board[4][6] = "floor"));
    R_able[2][6] := board[2][7] = "floor";
    L_able[2][6] := board[2][5] = "floor";
    U_able[2][7] := board[1][7] = "floor";
    D_able[2][7] := (board[3][7] = "floor" ) | ((board[3][7] = "box" ) &  (board[4][7] = "floor"));
    L_able[2][7] := (board[2][6] = "floor" ) | ((board[2][6] = "box" ) &  (board[2][5] = "floor"));
    U_able[3][5] := (board[2][5] = "floor" ) | ((board[2][5] = "box" ) &  (board[1][5] = "floor"));
    D_able[3][5] := (board[4][5] = "floor" ) | ((board[4][5] = "box" ) &  (board[5][5] = "floor"));
    R_able[3][5] := (board[3][6] = "floor" ) | ((board[3][6] = "box" ) &  (board[3][7] = "floor"));
    U_able[3][6] := (board[2][6] = "floor" ) | ((board[2][6] = "box" ) &  (board[1][6] = "floor"));
    D_able[3][6] := board[4][6] = "floor";
    R_able[3][6] := board[3][7] = "floor";
    L_able[3][6] := board[3][5] = "floor";
    U_able[3][7] := (board[2][7] = "floor" ) | ((board[2][7] = "box" ) &  (board[1][7] = "floor"));
    D_able[3][7] := board[4][7] = "floor";
    L_able[3][7] := (board[3][6] = "floor" ) | ((board[3][6] = "box" ) &  (board[3][5] = "floor"));
    D_able[4][3] := (board[5][3] = "floor" ) | ((board[5][3] = "box" ) &  (board[6][3] = "floor"));
    R_able[4][3] := (board[4][4] = "floor" ) | ((board[4][4] = "box" ) &  (board[4][5] = "floor"));
    R_able[4][4] := (board[4][5] = "floor" ) | ((board[4][5] = "box" ) &  (board[4][6] = "floor"));
    L_able[4][4] := board[4][3] = "floor";
    U_able[4][5] := (board[3][5] = "floor" ) | ((board[3][5] = "box" ) &  (board[2][5] = "floor"));
    D_able[4][5] := (board[5][5] = "floor" ) | ((board[5][5] = "box" ) &  (board[6][5] = "floor"));
    R_able[4][5] := (board[4][6] = "floor" ) | ((board[4][6] = "box" ) &  (board[4][7] = "floor"));
    L_able[4][5] := (board[4][4] = "floor" ) | ((board[4][4] = "box" ) &  (board[4][3] = "floor"));
    U_able[4][6] := (board[3][6] = "floor" ) | ((board[3][6] = "box" ) &  (board[2][6] = "floor"));
    R_able[4][6] := (board[4][7] = "floor" ) | ((board[4][7] = "box" ) &  (board[4][8] = "floor"));
    L_able[4][6] := (board[4][5] = "floor" ) | ((board[4][5] = "box" ) &  (board[4][4] = "floor"));
    U_able[4][7] := (board[3][7] = "floor" ) | ((board[3][7] = "box" ) &  (board[2][7] = "floor"));
    R_able[4][7] := board[4][8] = "floor";
    L_able[4][7] := (board[4][6] = "floor" ) | ((board[4][6] = "box" ) &  (board[4][5] = "floor"));
    D_able[4][8] := (board[5][8] = "floor" ) | ((board[5][8] = "box" ) &  (board[6][8] = "floor"));
    L_able[4][8] := (board[4][7] = "floor" ) | ((board[4][7] = "box" ) &  (board[4][6] = "floor"));
    U_able[5][3] := board[4][3] = "floor";
    D_able[5][3] := (board[6][3] = "floor" ) | ((board[6][3] = "box" ) &  (board[7][3] = "floor"));
    U_able[5][5] := (board[4][5] = "floor" ) | ((board[4][5] = "box" ) &  (board[3][5] = "floor"));
    D_able[5][5] := (board[6][5] = "floor" ) | ((board[6][5] = "box" ) &  (board[7][5] = "floor"));
    U_able[5][8] := board[4][8] = "floor";
    D_able[5][8] := (board[6][8] = "floor" ) | ((board[6][8] = "box" ) &  (board[7][8] = "floor"));
    D_able[6][1] := board[7][1] = "floor";
    R_able[6][1] := (board[6][2] = "floor" ) | ((board[6][2] = "box" ) &  (board[6][3] = "floor"));
    D_able[6][2] := board[7][2] = "floor";
    R_able[6][2] := board[6][3] = "floor";
    L_able[6][2] := board[6][1] = "floor";
    U_able[6][3] := (board[5][3] = "floor" ) | ((board[5][3] = "box" ) &  (board[4][3] = "floor"));
    D_able[6][3] := board[7][3] = "floor";
    L_able[6][3] := (board[6][2] = "floor" ) | ((board[6][2] = "box" ) &  (board[6][1] = "floor"));
    U_able[6][5] := (board[5][5] = "floor" ) | ((board[5][5] = "box" ) &  (board[4][5] = "floor"));
    D_able[6][5] := (board[7][5] = "floor" ) | ((board[7][5] = "box" ) &  (board[8][5] = "floor"));
    U_able[6][8] := (board[5][8] = "floor" ) | ((board[5][8] = "box" ) &  (board[4][8] = "floor"));
    D_able[6][8] := board[7][8] = "floor";
    D_able[6][14] := (board[7][14] = "floor" ) | ((board[7][14] = "box" ) &  (board[8][14] = "floor"));
    R_able[6][14] := (board[6][15] = "floor" ) | ((board[6][15] = "box" ) &  (board[6][16] = "goal"));
    D_able[6][15] := (board[7][15] = "floor" ) | ((board[7][15] = "box" ) &  (board[8][15] = "floor"));
    R_able[6][15] := (board[6][16] = "goal" ) | ((board[6][16] = "box_on_goal" ) &  (board[6][17] = "goal"));
    L_able[6][15] := board[6][14] = "floor";
    D_able[6][16] := (board[7][16] = "goal" ) | ((board[7][16] = "box_on_goal" ) &  (board[8][16] = "goal"));
    R_able[6][16] := board[6][17] = "goal";
    L_able[6][16] := (board[6][15] = "floor" ) | ((board[6][15] = "box" ) &  (board[6][14] = "floor"));
    D_able[6][17] := (board[7][17] = "goal" ) | ((board[7][17] = "box_on_goal" ) &  (board[8][17] = "goal"));
    L_able[6][17] := (board[6][16] = "goal" ) | ((board[6][16] = "box_on_goal" ) &  (board[6][15] = "floor"));
    U_able[7][1] := board[6][1] = "floor";
    R_able[7][1] := (board[7][2] = "floor" ) | ((board[7][2] = "box" ) &  (board[7][3] = "floor"));
    U_able[7][2] := board[6][2] = "floor";
    R_able[7][2] := (board[7][3] = "floor" ) | ((board[7][3] = "box" ) &  (board[7][4] = "floor"));
    L_able[7][2] := board[7][1] = "floor";
    U_able[7][3] := (board[6][3] = "floor" ) | ((board[6][3] = "box" ) &  (board[5][3] = "floor"));
    R_able[7][3] := (board[7][4] = "floor" ) | ((board[7][4] = "box" ) &  (board[7][5] = "floor"));
    L_able[7][3] := (board[7][2] = "floor" ) | ((board[7][2] = "box" ) &  (board[7][1] = "floor"));
    R_able[7][4] := (board[7][5] = "floor" ) | ((board[7][5] = "box" ) &  (board[7][6] = "floor"));
    L_able[7][4] := (board[7][3] = "floor" ) | ((board[7][3] = "box" ) &  (board[7][2] = "floor"));
    U_able[7][5] := (board[6][5] = "floor" ) | ((board[6][5] = "box" ) &  (board[5][5] = "floor"));
    D_able[7][5] := (board[8][5] = "floor" ) | ((board[8][5] = "box" ) &  (board[9][5] = "floor"));
    R_able[7][5] := (board[7][6] = "floor" ) | ((board[7][6] = "box" ) &  (board[7][7] = "floor"));
    L_able[7][5] := (board[7][4] = "floor" ) | ((board[7][4] = "box" ) &  (board[7][3] = "floor"));
    R_able[7][6] := (board[7][7] = "floor" ) | ((board[7][7] = "box" ) &  (board[7][8] = "floor"));
    L_able[7][6] := (board[7][5] = "floor" ) | ((board[7][5] = "box" ) &  (board[7][4] = "floor"));
    R_able[7][7] := (board[7][8] = "floor" ) | ((board[7][8] = "box" ) &  (board[7][9] = "floor"));
    L_able[7][7] := (board[7][6] = "floor" ) | ((board[7][6] = "box" ) &  (board[7][5] = "floor"));
    U_able[7][8] := (board[6][8] = "floor" ) | ((board[6][8] = "box" ) &  (board[5][8] = "floor"));
    R_able[7][8] := (board[7][9] = "floor" ) | ((board[7][9] = "box" ) &  (board[7][10] = "floor"));
    L_able[7][8] := (board[7][7] = "floor" ) | ((board[7][7] = "box" ) &  (board[7][6] = "floor"));
    D_able[7][9] := (board[8][9] = "floor" ) | ((board[8][9] = "box" ) &  (board[9][9] = "floor"));
    R_able[7][9] := (board[7][10] = "floor" ) | ((board[7][10] = "box" ) &  (board[7][11] = "floor"));
    L_able[7][9] := (board[7][8] = "floor" ) | ((board[7][8] = "box" ) &  (board[7][7] = "floor"));
    R_able[7][10] := (board[7][11] = "floor" ) | ((board[7][11] = "box" ) &  (board[7][12] = "floor"));
    L_able[7][10] := (board[7][9] = "floor" ) | ((board[7][9] = "box" ) &  (board[7][8] = "floor"));
    D_able[7][11] := board[8][11] = "floor";
    R_able[7][11] := (board[7][12] = "floor" ) | ((board[7][12] = "box" ) &  (board[7][13] = "floor"));
    L_able[7][11] := (board[7][10] = "floor" ) | ((board[7][10] = "box" ) &  (board[7][9] = "floor"));
    R_able[7][12] := (board[7][13] = "floor" ) | ((board[7][13] = "box" ) &  (board[7][14] = "floor"));
    L_able[7][12] := (board[7][11] = "floor" ) | ((board[7][11] = "box" ) &  (board[7][10] = "floor"));
    R_able[7][13] := (board[7][14] = "floor" ) | ((board[7][14] = "box" ) &  (board[7][15] = "floor"));
    L_able[7][13] := (board[7][12] = "floor" ) | ((board[7][12] = "box" ) &  (board[7][11] = "floor"));
    U_able[7][14] := board[6][14] = "floor";
    D_able[7][14] := board[8][14] = "floor";
    R_able[7][14] := (board[7][15] = "floor" ) | ((board[7][15] = "box" ) &  (board[7][16] = "goal"));
    L_able[7][14] := (board[7][13] = "floor" ) | ((board[7][13] = "box" ) &  (board[7][12] = "floor"));
    U_able[7][15] := board[6][15] = "floor";
    D_able[7][15] := board[8][15] = "floor";
    R_able[7][15] := (board[7][16] = "goal" ) | ((board[7][16] = "box_on_goal" ) &  (board[7][17] = "goal"));
    L_able[7][15] := (board[7][14] = "floor" ) | ((board[7][14] = "box" ) &  (board[7][13] = "floor"));
    U_able[7][16] := board[6][16] = "goal";
    D_able[7][16] := board[8][16] = "goal";
    R_able[7][16] := board[7][17] = "goal";
    L_able[7][16] := (board[7][15] = "floor" ) | ((board[7][15] = "box" ) &  (board[7][14] = "floor"));
    U_able[7][17] := board[6][17] = "goal";
    D_able[7][17] := board[8][17] = "goal";
    L_able[7][17] := (board[7][16] = "goal" ) | ((board[7][16] = "box_on_goal" ) &  (board[7][15] = "floor"));
    U_able[8][5] := (board[7][5] = "floor" ) | ((board[7][5] = "box" ) &  (board[6][5] = "floor"));
    D_able[8][5] := board[9][5] = "floor";
    U_able[8][9] := board[7][9] = "floor";
    D_able[8][9] := board[9][9] = "floor";
    U_able[8][11] := board[7][11] = "floor";
    U_able[8][14] := (board[7][14] = "floor" ) | ((board[7][14] = "box" ) &  (board[6][14] = "floor"));
    R_able[8][14] := (board[8][15] = "floor" ) | ((board[8][15] = "box" ) &  (board[8][16] = "goal"));
    U_able[8][15] := (board[7][15] = "floor" ) | ((board[7][15] = "box" ) &  (board[6][15] = "floor"));
    R_able[8][15] := (board[8][16] = "goal" ) | ((board[8][16] = "box_on_goal" ) &  (board[8][17] = "goal"));
    L_able[8][15] := board[8][14] = "floor";
    U_able[8][16] := (board[7][16] = "goal" ) | ((board[7][16] = "box_on_goal" ) &  (board[6][16] = "goal"));
    R_able[8][16] := board[8][17] = "goal";
    L_able[8][16] := (board[8][15] = "floor" ) | ((board[8][15] = "box" ) &  (board[8][14] = "floor"));
    U_able[8][17] := (board[7][17] = "goal" ) | ((board[7][17] = "box_on_goal" ) &  (board[6][17] = "goal"));
    L_able[8][17] := (board[8][16] = "goal" ) | ((board[8][16] = "box_on_goal" ) &  (board[8][15] = "floor"));
    U_able[9][5] := (board[8][5] = "floor" ) | ((board[8][5] = "box" ) &  (board[7][5] = "floor"));
    R_able[9][5] := (board[9][6] = "floor" ) | ((board[9][6] = "box" ) &  (board[9][7] = "floor"));
    R_able[9][6] := (board[9][7] = "floor" ) | ((board[9][7] = "box" ) &  (board[9][8] = "floor"));
    L_able[9][6] := board[9][5] = "floor";
    R_able[9][7] := (board[9][8] = "floor" ) | ((board[9][8] = "box" ) &  (board[9][9] = "floor"));
    L_able[9][7] := (board[9][6] = "floor" ) | ((board[9][6] = "box" ) &  (board[9][5] = "floor"));
    R_able[9][8] := board[9][9] = "floor";
    L_able[9][8] := (board[9][7] = "floor" ) | ((board[9][7] = "box" ) &  (board[9][6] = "floor"));
    U_able[9][9] := (board[8][9] = "floor" ) | ((board[8][9] = "box" ) &  (board[7][9] = "floor"));
    L_able[9][9] := (board[9][8] = "floor" ) | ((board[9][8] = "box" ) &  (board[9][7] = "floor"));
    goal1 := case  -- for each goal/box on goal in init.
       board[6][16] = "box_on_goal" : 5;
       TRUE: 0;
    esac;
    goal2 := case  -- for each goal/box on goal in init.
       board[6][17] = "box_on_goal" : 6;
       TRUE: 0;
    esac;
    goal3 := case  -- for each goal/box on goal in init.
       board[7][16] = "box_on_goal" : 5;
       TRUE: 0;
    esac;
    goal4 := case  -- for each goal/box on goal in init.
       board[7][17] = "box_on_goal" : 6;
       TRUE: 0;
    esac;
    goal5 := case  -- for each goal/box on goal in init.
       board[8][16] = "box_on_goal" : 5;
       TRUE: 0;
    esac;
    goal6 := case  -- for each goal/box on goal in init.
       board[8][17] = "box_on_goal" : 6;
       TRUE: 0;
    esac;
    solve := (goal1 + goal2 + goal3 + goal4 + goal5 + goal6) > 17;


ASSIGN
next (shift) := { "U" , "D" , "L" , "R" };


-- Define the wall

next (board[0][0]) := (board[0][0]);
next (board[0][1]) := (board[0][1]);
next (board[0][2]) := (board[0][2]);
next (board[0][3]) := (board[0][3]);
next (board[0][4]) := (board[0][4]);
next (board[0][5]) := (board[0][5]);
next (board[0][6]) := (board[0][6]);
next (board[0][7]) := (board[0][7]);
next (board[0][8]) := (board[0][8]);
next (board[0][9]) := (board[0][9]);
next (board[0][10]) := (board[0][10]);
next (board[0][11]) := (board[0][11]);
next (board[0][12]) := (board[0][12]);
next (board[0][13]) := (board[0][13]);
next (board[0][14]) := (board[0][14]);
next (board[0][15]) := (board[0][15]);
next (board[0][16]) := (board[0][16]);
next (board[0][17]) := (board[0][17]);
next (board[0][18]) := (board[0][18]);
next (board[1][0]) := (board[1][0]);
next (board[1][1]) := (board[1][1]);
next (board[1][2]) := (board[1][2]);
next (board[1][3]) := (board[1][3]);
next (board[1][4]) := (board[1][4]);
next (board[1][8]) := (board[1][8]);
next (board[1][9]) := (board[1][9]);
next (board[1][10]) := (board[1][10]);
next (board[1][11]) := (board[1][11]);
next (board[1][12]) := (board[1][12]);
next (board[1][13]) := (board[1][13]);
next (board[1][14]) := (board[1][14]);
next (board[1][15]) := (board[1][15]);
next (board[1][16]) := (board[1][16]);
next (board[1][17]) := (board[1][17]);
next (board[1][18]) := (board[1][18]);
next (board[2][0]) := (board[2][0]);
next (board[2][1]) := (board[2][1]);
next (board[2][2]) := (board[2][2]);
next (board[2][3]) := (board[2][3]);
next (board[2][4]) := (board[2][4]);
next (board[2][8]) := (board[2][8]);
next (board[2][9]) := (board[2][9]);
next (board[2][10]) := (board[2][10]);
next (board[2][11]) := (board[2][11]);
next (board[2][12]) := (board[2][12]);
next (board[2][13]) := (board[2][13]);
next (board[2][14]) := (board[2][14]);
next (board[2][15]) := (board[2][15]);
next (board[2][16]) := (board[2][16]);
next (board[2][17]) := (board[2][17]);
next (board[2][18]) := (board[2][18]);
next (board[3][0]) := (board[3][0]);
next (board[3][1]) := (board[3][1]);
next (board[3][2]) := (board[3][2]);
next (board[3][3]) := (board[3][3]);
next (board[3][4]) := (board[3][4]);
next (board[3][8]) := (board[3][8]);
next (board[3][9]) := (board[3][9]);
next (board[3][10]) := (board[3][10]);
next (board[3][11]) := (board[3][11]);
next (board[3][12]) := (board[3][12]);
next (board[3][13]) := (board[3][13]);
next (board[3][14]) := (board[3][14]);
next (board[3][15]) := (board[3][15]);
next (board[3][16]) := (board[3][16]);
next (board[3][17]) := (board[3][17]);
next (board[3][18]) := (board[3][18]);
next (board[4][0]) := (board[4][0]);
next (board[4][1]) := (board[4][1]);
next (board[4][2]) := (board[4][2]);
next (board[4][9]) := (board[4][9]);
next (board[4][10]) := (board[4][10]);
next (board[4][11]) := (board[4][11]);
next (board[4][12]) := (board[4][12]);
next (board[4][13]) := (board[4][13]);
next (board[4][14]) := (board[4][14]);
next (board[4][15]) := (board[4][15]);
next (board[4][16]) := (board[4][16]);
next (board[4][17]) := (board[4][17]);
next (board[4][18]) := (board[4][18]);
next (board[5][0]) := (board[5][0]);
next (board[5][1]) := (board[5][1]);
next (board[5][2]) := (board[5][2]);
next (board[5][4]) := (board[5][4]);
next (board[5][6]) := (board[5][6]);
next (board[5][7]) := (board[5][7]);
next (board[5][9]) := (board[5][9]);
next (board[5][10]) := (board[5][10]);
next (board[5][11]) := (board[5][11]);
next (board[5][12]) := (board[5][12]);
next (board[5][13]) := (board[5][13]);
next (board[5][14]) := (board[5][14]);
next (board[5][15]) := (board[5][15]);
next (board[5][16]) := (board[5][16]);
next (board[5][17]) := (board[5][17]);
next (board[5][18]) := (board[5][18]);
next (board[6][0]) := (board[6][0]);
next (board[6][4]) := (board[6][4]);
next (board[6][6]) := (board[6][6]);
next (board[6][7]) := (board[6][7]);
next (board[6][9]) := (board[6][9]);
next (board[6][10]) := (board[6][10]);
next (board[6][11]) := (board[6][11]);
next (board[6][12]) := (board[6][12]);
next (board[6][13]) := (board[6][13]);
next (board[6][18]) := (board[6][18]);
next (board[7][0]) := (board[7][0]);
next (board[7][18]) := (board[7][18]);
next (board[8][0]) := (board[8][0]);
next (board[8][1]) := (board[8][1]);
next (board[8][2]) := (board[8][2]);
next (board[8][3]) := (board[8][3]);
next (board[8][4]) := (board[8][4]);
next (board[8][6]) := (board[8][6]);
next (board[8][7]) := (board[8][7]);
next (board[8][8]) := (board[8][8]);
next (board[8][10]) := (board[8][10]);
next (board[8][12]) := (board[8][12]);
next (board[8][13]) := (board[8][13]);
next (board[8][18]) := (board[8][18]);
next (board[9][0]) := (board[9][0]);
next (board[9][1]) := (board[9][1]);
next (board[9][2]) := (board[9][2]);
next (board[9][3]) := (board[9][3]);
next (board[9][4]) := (board[9][4]);
next (board[9][10]) := (board[9][10]);
next (board[9][11]) := (board[9][11]);
next (board[9][12]) := (board[9][12]);
next (board[9][13]) := (board[9][13]);
next (board[9][14]) := (board[9][14]);
next (board[9][15]) := (board[9][15]);
next (board[9][16]) := (board[9][16]);
next (board[9][17]) := (board[9][17]);
next (board[9][18]) := (board[9][18]);
next (board[10][0]) := (board[10][0]);
next (board[10][1]) := (board[10][1]);
next (board[10][2]) := (board[10][2]);
next (board[10][3]) := (board[10][3]);
next (board[10][4]) := (board[10][4]);
next (board[10][5]) := (board[10][5]);
next (board[10][6]) := (board[10][6]);
next (board[10][7]) := (board[10][7]);
next (board[10][8]) := (board[10][8]);
next (board[10][9]) := (board[10][9]);
next (board[10][10]) := (board[10][10]);
next (board[10][11]) := (board[10][11]);
next (board[10][12]) := (board[10][12]);
next (board[10][13]) := (board[10][13]);
next (board[10][14]) := (board[10][14]);
next (board[10][15]) := (board[10][15]);
next (board[10][16]) := (board[10][16]);
next (board[10][17]) := (board[10][17]);
next (board[10][18]) := (board[10][18]);


-- Define the floor, box and warehouse keeper

next (board[1][5]) := case
    U_able[2][5] & next (shift) = "U" & board[2][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[1][5] & next (shift) = "D" & board[1][5] = "warehouse_keeper"  : {"floor"};
    U_able[3][5] & next (shift) = "U" & board[3][5] = "warehouse_keeper" & board[2][5] = "box"  : {"box"};
    L_able[1][6] & next (shift) = "L" & board[1][6] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[1][5] & next (shift) = "R" & board[1][5] = "warehouse_keeper"  : {"floor"};
    L_able[1][7] & next (shift) = "L" & board[1][7] = "warehouse_keeper" & board[1][6] = "box"  : {"box"};
TRUE : board[1][5];
esac;

next (board[1][6]) := case
    U_able[2][6] & next (shift) = "U" & board[2][6] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[1][6] & next (shift) = "D" & board[1][6] = "warehouse_keeper"  : {"floor"};
    U_able[3][6] & next (shift) = "U" & board[3][6] = "warehouse_keeper" & board[2][6] = "box"  : {"box"};
    L_able[1][7] & next (shift) = "L" & board[1][7] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[1][6] & next (shift) = "R" & board[1][6] = "warehouse_keeper"  : {"floor"};
    R_able[1][5] & next (shift) = "R" & board[1][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[1][6] & next (shift) = "L" & board[1][6] = "warehouse_keeper"  : {"floor"};
TRUE : board[1][6];
esac;

next (board[1][7]) := case
    U_able[2][7] & next (shift) = "U" & board[2][7] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[1][7] & next (shift) = "D" & board[1][7] = "warehouse_keeper"  : {"floor"};
    U_able[3][7] & next (shift) = "U" & board[3][7] = "warehouse_keeper" & board[2][7] = "box"  : {"box"};
    R_able[1][6] & next (shift) = "R" & board[1][6] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[1][7] & next (shift) = "L" & board[1][7] = "warehouse_keeper"  : {"floor"};
    R_able[1][5] & next (shift) = "R" & board[1][5] = "warehouse_keeper" & board[1][6] = "box"  : {"box"};
TRUE : board[1][7];
esac;

next (board[2][5]) := case
    U_able[3][5] & next (shift) = "U" & board[3][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[2][5] & next (shift) = "D" & board[2][5] = "warehouse_keeper"  : {"floor"};
    U_able[4][5] & next (shift) = "U" & board[4][5] = "warehouse_keeper" & board[3][5] = "box"  : {"box"};
    D_able[1][5] & next (shift) = "D" & board[1][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[2][5] & next (shift) = "U" & board[2][5] = "warehouse_keeper"  : {"floor"};
    L_able[2][6] & next (shift) = "L" & board[2][6] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[2][5] & next (shift) = "R" & board[2][5] = "warehouse_keeper"  : {"floor"};
    L_able[2][7] & next (shift) = "L" & board[2][7] = "warehouse_keeper" & board[2][6] = "box"  : {"box"};
TRUE : board[2][5];
esac;

next (board[2][6]) := case
    U_able[3][6] & next (shift) = "U" & board[3][6] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[2][6] & next (shift) = "D" & board[2][6] = "warehouse_keeper"  : {"floor"};
    U_able[4][6] & next (shift) = "U" & board[4][6] = "warehouse_keeper" & board[3][6] = "box"  : {"box"};
    D_able[1][6] & next (shift) = "D" & board[1][6] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[2][6] & next (shift) = "U" & board[2][6] = "warehouse_keeper"  : {"floor"};
    L_able[2][7] & next (shift) = "L" & board[2][7] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[2][6] & next (shift) = "R" & board[2][6] = "warehouse_keeper"  : {"floor"};
    R_able[2][5] & next (shift) = "R" & board[2][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[2][6] & next (shift) = "L" & board[2][6] = "warehouse_keeper"  : {"floor"};
TRUE : board[2][6];
esac;

next (board[2][7]) := case
    U_able[3][7] & next (shift) = "U" & board[3][7] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[2][7] & next (shift) = "D" & board[2][7] = "warehouse_keeper"  : {"floor"};
    U_able[4][7] & next (shift) = "U" & board[4][7] = "warehouse_keeper" & board[3][7] = "box"  : {"box"};
    D_able[1][7] & next (shift) = "D" & board[1][7] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[2][7] & next (shift) = "U" & board[2][7] = "warehouse_keeper"  : {"floor"};
    R_able[2][6] & next (shift) = "R" & board[2][6] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[2][7] & next (shift) = "L" & board[2][7] = "warehouse_keeper"  : {"floor"};
    R_able[2][5] & next (shift) = "R" & board[2][5] = "warehouse_keeper" & board[2][6] = "box"  : {"box"};
TRUE : board[2][7];
esac;

next (board[3][5]) := case
    U_able[4][5] & next (shift) = "U" & board[4][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[3][5] & next (shift) = "D" & board[3][5] = "warehouse_keeper"  : {"floor"};
    U_able[5][5] & next (shift) = "U" & board[5][5] = "warehouse_keeper" & board[4][5] = "box"  : {"box"};
    D_able[2][5] & next (shift) = "D" & board[2][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[3][5] & next (shift) = "U" & board[3][5] = "warehouse_keeper"  : {"floor"};
    D_able[1][5] & next (shift) = "D" & board[1][5] = "warehouse_keeper" & board[2][5] = "box"  : {"box"};
    L_able[3][6] & next (shift) = "L" & board[3][6] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[3][5] & next (shift) = "R" & board[3][5] = "warehouse_keeper"  : {"floor"};
    L_able[3][7] & next (shift) = "L" & board[3][7] = "warehouse_keeper" & board[3][6] = "box"  : {"box"};
TRUE : board[3][5];
esac;

next (board[3][6]) := case
    U_able[4][6] & next (shift) = "U" & board[4][6] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[3][6] & next (shift) = "D" & board[3][6] = "warehouse_keeper"  : {"floor"};
    D_able[2][6] & next (shift) = "D" & board[2][6] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[3][6] & next (shift) = "U" & board[3][6] = "warehouse_keeper"  : {"floor"};
    D_able[1][6] & next (shift) = "D" & board[1][6] = "warehouse_keeper" & board[2][6] = "box"  : {"box"};
    L_able[3][7] & next (shift) = "L" & board[3][7] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[3][6] & next (shift) = "R" & board[3][6] = "warehouse_keeper"  : {"floor"};
    R_able[3][5] & next (shift) = "R" & board[3][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[3][6] & next (shift) = "L" & board[3][6] = "warehouse_keeper"  : {"floor"};
TRUE : board[3][6];
esac;

next (board[3][7]) := case
    U_able[4][7] & next (shift) = "U" & board[4][7] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[3][7] & next (shift) = "D" & board[3][7] = "warehouse_keeper"  : {"floor"};
    D_able[2][7] & next (shift) = "D" & board[2][7] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[3][7] & next (shift) = "U" & board[3][7] = "warehouse_keeper"  : {"floor"};
    D_able[1][7] & next (shift) = "D" & board[1][7] = "warehouse_keeper" & board[2][7] = "box"  : {"box"};
    R_able[3][6] & next (shift) = "R" & board[3][6] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[3][7] & next (shift) = "L" & board[3][7] = "warehouse_keeper"  : {"floor"};
    R_able[3][5] & next (shift) = "R" & board[3][5] = "warehouse_keeper" & board[3][6] = "box"  : {"box"};
TRUE : board[3][7];
esac;

next (board[4][3]) := case
    U_able[5][3] & next (shift) = "U" & board[5][3] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[4][3] & next (shift) = "D" & board[4][3] = "warehouse_keeper"  : {"floor"};
    U_able[6][3] & next (shift) = "U" & board[6][3] = "warehouse_keeper" & board[5][3] = "box"  : {"box"};
    L_able[4][4] & next (shift) = "L" & board[4][4] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[4][3] & next (shift) = "R" & board[4][3] = "warehouse_keeper"  : {"floor"};
    L_able[4][5] & next (shift) = "L" & board[4][5] = "warehouse_keeper" & board[4][4] = "box"  : {"box"};
TRUE : board[4][3];
esac;

next (board[4][4]) := case
    L_able[4][5] & next (shift) = "L" & board[4][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[4][4] & next (shift) = "R" & board[4][4] = "warehouse_keeper"  : {"floor"};
    L_able[4][6] & next (shift) = "L" & board[4][6] = "warehouse_keeper" & board[4][5] = "box"  : {"box"};
    R_able[4][3] & next (shift) = "R" & board[4][3] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[4][4] & next (shift) = "L" & board[4][4] = "warehouse_keeper"  : {"floor"};
TRUE : board[4][4];
esac;

next (board[4][5]) := case
    U_able[5][5] & next (shift) = "U" & board[5][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[4][5] & next (shift) = "D" & board[4][5] = "warehouse_keeper"  : {"floor"};
    U_able[6][5] & next (shift) = "U" & board[6][5] = "warehouse_keeper" & board[5][5] = "box"  : {"box"};
    D_able[3][5] & next (shift) = "D" & board[3][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[4][5] & next (shift) = "U" & board[4][5] = "warehouse_keeper"  : {"floor"};
    D_able[2][5] & next (shift) = "D" & board[2][5] = "warehouse_keeper" & board[3][5] = "box"  : {"box"};
    L_able[4][6] & next (shift) = "L" & board[4][6] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[4][5] & next (shift) = "R" & board[4][5] = "warehouse_keeper"  : {"floor"};
    L_able[4][7] & next (shift) = "L" & board[4][7] = "warehouse_keeper" & board[4][6] = "box"  : {"box"};
    R_able[4][4] & next (shift) = "R" & board[4][4] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[4][5] & next (shift) = "L" & board[4][5] = "warehouse_keeper"  : {"floor"};
    R_able[4][3] & next (shift) = "R" & board[4][3] = "warehouse_keeper" & board[4][4] = "box"  : {"box"};
TRUE : board[4][5];
esac;

next (board[4][6]) := case
    D_able[3][6] & next (shift) = "D" & board[3][6] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[4][6] & next (shift) = "U" & board[4][6] = "warehouse_keeper"  : {"floor"};
    D_able[2][6] & next (shift) = "D" & board[2][6] = "warehouse_keeper" & board[3][6] = "box"  : {"box"};
    L_able[4][7] & next (shift) = "L" & board[4][7] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[4][6] & next (shift) = "R" & board[4][6] = "warehouse_keeper"  : {"floor"};
    L_able[4][8] & next (shift) = "L" & board[4][8] = "warehouse_keeper" & board[4][7] = "box"  : {"box"};
    R_able[4][5] & next (shift) = "R" & board[4][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[4][6] & next (shift) = "L" & board[4][6] = "warehouse_keeper"  : {"floor"};
    R_able[4][4] & next (shift) = "R" & board[4][4] = "warehouse_keeper" & board[4][5] = "box"  : {"box"};
TRUE : board[4][6];
esac;

next (board[4][7]) := case
    D_able[3][7] & next (shift) = "D" & board[3][7] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[4][7] & next (shift) = "U" & board[4][7] = "warehouse_keeper"  : {"floor"};
    D_able[2][7] & next (shift) = "D" & board[2][7] = "warehouse_keeper" & board[3][7] = "box"  : {"box"};
    L_able[4][8] & next (shift) = "L" & board[4][8] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[4][7] & next (shift) = "R" & board[4][7] = "warehouse_keeper"  : {"floor"};
    R_able[4][6] & next (shift) = "R" & board[4][6] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[4][7] & next (shift) = "L" & board[4][7] = "warehouse_keeper"  : {"floor"};
    R_able[4][5] & next (shift) = "R" & board[4][5] = "warehouse_keeper" & board[4][6] = "box"  : {"box"};
TRUE : board[4][7];
esac;

next (board[4][8]) := case
    U_able[5][8] & next (shift) = "U" & board[5][8] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[4][8] & next (shift) = "D" & board[4][8] = "warehouse_keeper"  : {"floor"};
    U_able[6][8] & next (shift) = "U" & board[6][8] = "warehouse_keeper" & board[5][8] = "box"  : {"box"};
    R_able[4][7] & next (shift) = "R" & board[4][7] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[4][8] & next (shift) = "L" & board[4][8] = "warehouse_keeper"  : {"floor"};
    R_able[4][6] & next (shift) = "R" & board[4][6] = "warehouse_keeper" & board[4][7] = "box"  : {"box"};
TRUE : board[4][8];
esac;

next (board[5][3]) := case
    U_able[6][3] & next (shift) = "U" & board[6][3] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[5][3] & next (shift) = "D" & board[5][3] = "warehouse_keeper"  : {"floor"};
    U_able[7][3] & next (shift) = "U" & board[7][3] = "warehouse_keeper" & board[6][3] = "box"  : {"box"};
    D_able[4][3] & next (shift) = "D" & board[4][3] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[5][3] & next (shift) = "U" & board[5][3] = "warehouse_keeper"  : {"floor"};
TRUE : board[5][3];
esac;

next (board[5][5]) := case
    U_able[6][5] & next (shift) = "U" & board[6][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[5][5] & next (shift) = "D" & board[5][5] = "warehouse_keeper"  : {"floor"};
    U_able[7][5] & next (shift) = "U" & board[7][5] = "warehouse_keeper" & board[6][5] = "box"  : {"box"};
    D_able[4][5] & next (shift) = "D" & board[4][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[5][5] & next (shift) = "U" & board[5][5] = "warehouse_keeper"  : {"floor"};
    D_able[3][5] & next (shift) = "D" & board[3][5] = "warehouse_keeper" & board[4][5] = "box"  : {"box"};
TRUE : board[5][5];
esac;

next (board[5][8]) := case
    U_able[6][8] & next (shift) = "U" & board[6][8] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[5][8] & next (shift) = "D" & board[5][8] = "warehouse_keeper"  : {"floor"};
    U_able[7][8] & next (shift) = "U" & board[7][8] = "warehouse_keeper" & board[6][8] = "box"  : {"box"};
    D_able[4][8] & next (shift) = "D" & board[4][8] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[5][8] & next (shift) = "U" & board[5][8] = "warehouse_keeper"  : {"floor"};
TRUE : board[5][8];
esac;

next (board[6][1]) := case
    U_able[7][1] & next (shift) = "U" & board[7][1] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[6][1] & next (shift) = "D" & board[6][1] = "warehouse_keeper"  : {"floor"};
    L_able[6][2] & next (shift) = "L" & board[6][2] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[6][1] & next (shift) = "R" & board[6][1] = "warehouse_keeper"  : {"floor"};
    L_able[6][3] & next (shift) = "L" & board[6][3] = "warehouse_keeper" & board[6][2] = "box"  : {"box"};
TRUE : board[6][1];
esac;

next (board[6][2]) := case
    U_able[7][2] & next (shift) = "U" & board[7][2] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[6][2] & next (shift) = "D" & board[6][2] = "warehouse_keeper"  : {"floor"};
    L_able[6][3] & next (shift) = "L" & board[6][3] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[6][2] & next (shift) = "R" & board[6][2] = "warehouse_keeper"  : {"floor"};
    R_able[6][1] & next (shift) = "R" & board[6][1] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[6][2] & next (shift) = "L" & board[6][2] = "warehouse_keeper"  : {"floor"};
TRUE : board[6][2];
esac;

next (board[6][3]) := case
    U_able[7][3] & next (shift) = "U" & board[7][3] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[6][3] & next (shift) = "D" & board[6][3] = "warehouse_keeper"  : {"floor"};
    D_able[5][3] & next (shift) = "D" & board[5][3] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[6][3] & next (shift) = "U" & board[6][3] = "warehouse_keeper"  : {"floor"};
    D_able[4][3] & next (shift) = "D" & board[4][3] = "warehouse_keeper" & board[5][3] = "box"  : {"box"};
    R_able[6][2] & next (shift) = "R" & board[6][2] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[6][3] & next (shift) = "L" & board[6][3] = "warehouse_keeper"  : {"floor"};
    R_able[6][1] & next (shift) = "R" & board[6][1] = "warehouse_keeper" & board[6][2] = "box"  : {"box"};
TRUE : board[6][3];
esac;

next (board[6][5]) := case
    U_able[7][5] & next (shift) = "U" & board[7][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[6][5] & next (shift) = "D" & board[6][5] = "warehouse_keeper"  : {"floor"};
    U_able[8][5] & next (shift) = "U" & board[8][5] = "warehouse_keeper" & board[7][5] = "box"  : {"box"};
    D_able[5][5] & next (shift) = "D" & board[5][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[6][5] & next (shift) = "U" & board[6][5] = "warehouse_keeper"  : {"floor"};
    D_able[4][5] & next (shift) = "D" & board[4][5] = "warehouse_keeper" & board[5][5] = "box"  : {"box"};
TRUE : board[6][5];
esac;

next (board[6][8]) := case
    U_able[7][8] & next (shift) = "U" & board[7][8] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[6][8] & next (shift) = "D" & board[6][8] = "warehouse_keeper"  : {"floor"};
    D_able[5][8] & next (shift) = "D" & board[5][8] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[6][8] & next (shift) = "U" & board[6][8] = "warehouse_keeper"  : {"floor"};
    D_able[4][8] & next (shift) = "D" & board[4][8] = "warehouse_keeper" & board[5][8] = "box"  : {"box"};
TRUE : board[6][8];
esac;

next (board[6][14]) := case
    U_able[7][14] & next (shift) = "U" & board[7][14] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[6][14] & next (shift) = "D" & board[6][14] = "warehouse_keeper"  : {"floor"};
    U_able[8][14] & next (shift) = "U" & board[8][14] = "warehouse_keeper" & board[7][14] = "box"  : {"box"};
    L_able[6][15] & next (shift) = "L" & board[6][15] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[6][14] & next (shift) = "R" & board[6][14] = "warehouse_keeper"  : {"floor"};
    L_able[6][16] & next (shift) = "L" & board[6][16] = "warehouse_keeper_on_goal" & board[6][15] = "box"  : {"box"};
TRUE : board[6][14];
esac;

next (board[6][15]) := case
    U_able[7][15] & next (shift) = "U" & board[7][15] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[6][15] & next (shift) = "D" & board[6][15] = "warehouse_keeper"  : {"floor"};
    U_able[8][15] & next (shift) = "U" & board[8][15] = "warehouse_keeper" & board[7][15] = "box"  : {"box"};
    L_able[6][16] & next (shift) = "L" & board[6][16] = "warehouse_keeper_on_goal"  : {"warehouse_keeper"};
    R_able[6][15] & next (shift) = "R" & board[6][15] = "warehouse_keeper"  : {"floor"};
    L_able[6][17] & next (shift) = "L" & board[6][17] = "warehouse_keeper_on_goal" & board[6][16] = "box_on_goal"  : {"box"};
    R_able[6][14] & next (shift) = "R" & board[6][14] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[6][15] & next (shift) = "L" & board[6][15] = "warehouse_keeper"  : {"floor"};
TRUE : board[6][15];
esac;

next (board[7][1]) := case
    D_able[6][1] & next (shift) = "D" & board[6][1] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[7][1] & next (shift) = "U" & board[7][1] = "warehouse_keeper"  : {"floor"};
    L_able[7][2] & next (shift) = "L" & board[7][2] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[7][1] & next (shift) = "R" & board[7][1] = "warehouse_keeper"  : {"floor"};
    L_able[7][3] & next (shift) = "L" & board[7][3] = "warehouse_keeper" & board[7][2] = "box"  : {"box"};
TRUE : board[7][1];
esac;

next (board[7][2]) := case
    D_able[6][2] & next (shift) = "D" & board[6][2] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[7][2] & next (shift) = "U" & board[7][2] = "warehouse_keeper"  : {"floor"};
    L_able[7][3] & next (shift) = "L" & board[7][3] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[7][2] & next (shift) = "R" & board[7][2] = "warehouse_keeper"  : {"floor"};
    L_able[7][4] & next (shift) = "L" & board[7][4] = "warehouse_keeper" & board[7][3] = "box"  : {"box"};
    R_able[7][1] & next (shift) = "R" & board[7][1] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[7][2] & next (shift) = "L" & board[7][2] = "warehouse_keeper"  : {"floor"};
TRUE : board[7][2];
esac;

next (board[7][3]) := case
    D_able[6][3] & next (shift) = "D" & board[6][3] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[7][3] & next (shift) = "U" & board[7][3] = "warehouse_keeper"  : {"floor"};
    D_able[5][3] & next (shift) = "D" & board[5][3] = "warehouse_keeper" & board[6][3] = "box"  : {"box"};
    L_able[7][4] & next (shift) = "L" & board[7][4] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[7][3] & next (shift) = "R" & board[7][3] = "warehouse_keeper"  : {"floor"};
    L_able[7][5] & next (shift) = "L" & board[7][5] = "warehouse_keeper" & board[7][4] = "box"  : {"box"};
    R_able[7][2] & next (shift) = "R" & board[7][2] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[7][3] & next (shift) = "L" & board[7][3] = "warehouse_keeper"  : {"floor"};
    R_able[7][1] & next (shift) = "R" & board[7][1] = "warehouse_keeper" & board[7][2] = "box"  : {"box"};
TRUE : board[7][3];
esac;

next (board[7][4]) := case
    L_able[7][5] & next (shift) = "L" & board[7][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[7][4] & next (shift) = "R" & board[7][4] = "warehouse_keeper"  : {"floor"};
    L_able[7][6] & next (shift) = "L" & board[7][6] = "warehouse_keeper" & board[7][5] = "box"  : {"box"};
    R_able[7][3] & next (shift) = "R" & board[7][3] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[7][4] & next (shift) = "L" & board[7][4] = "warehouse_keeper"  : {"floor"};
    R_able[7][2] & next (shift) = "R" & board[7][2] = "warehouse_keeper" & board[7][3] = "box"  : {"box"};
TRUE : board[7][4];
esac;

next (board[7][5]) := case
    U_able[8][5] & next (shift) = "U" & board[8][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[7][5] & next (shift) = "D" & board[7][5] = "warehouse_keeper"  : {"floor"};
    U_able[9][5] & next (shift) = "U" & board[9][5] = "warehouse_keeper" & board[8][5] = "box"  : {"box"};
    D_able[6][5] & next (shift) = "D" & board[6][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[7][5] & next (shift) = "U" & board[7][5] = "warehouse_keeper"  : {"floor"};
    D_able[5][5] & next (shift) = "D" & board[5][5] = "warehouse_keeper" & board[6][5] = "box"  : {"box"};
    L_able[7][6] & next (shift) = "L" & board[7][6] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[7][5] & next (shift) = "R" & board[7][5] = "warehouse_keeper"  : {"floor"};
    L_able[7][7] & next (shift) = "L" & board[7][7] = "warehouse_keeper" & board[7][6] = "box"  : {"box"};
    R_able[7][4] & next (shift) = "R" & board[7][4] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[7][5] & next (shift) = "L" & board[7][5] = "warehouse_keeper"  : {"floor"};
    R_able[7][3] & next (shift) = "R" & board[7][3] = "warehouse_keeper" & board[7][4] = "box"  : {"box"};
TRUE : board[7][5];
esac;

next (board[7][6]) := case
    L_able[7][7] & next (shift) = "L" & board[7][7] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[7][6] & next (shift) = "R" & board[7][6] = "warehouse_keeper"  : {"floor"};
    L_able[7][8] & next (shift) = "L" & board[7][8] = "warehouse_keeper" & board[7][7] = "box"  : {"box"};
    R_able[7][5] & next (shift) = "R" & board[7][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[7][6] & next (shift) = "L" & board[7][6] = "warehouse_keeper"  : {"floor"};
    R_able[7][4] & next (shift) = "R" & board[7][4] = "warehouse_keeper" & board[7][5] = "box"  : {"box"};
TRUE : board[7][6];
esac;

next (board[7][7]) := case
    L_able[7][8] & next (shift) = "L" & board[7][8] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[7][7] & next (shift) = "R" & board[7][7] = "warehouse_keeper"  : {"floor"};
    L_able[7][9] & next (shift) = "L" & board[7][9] = "warehouse_keeper" & board[7][8] = "box"  : {"box"};
    R_able[7][6] & next (shift) = "R" & board[7][6] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[7][7] & next (shift) = "L" & board[7][7] = "warehouse_keeper"  : {"floor"};
    R_able[7][5] & next (shift) = "R" & board[7][5] = "warehouse_keeper" & board[7][6] = "box"  : {"box"};
TRUE : board[7][7];
esac;

next (board[7][8]) := case
    D_able[6][8] & next (shift) = "D" & board[6][8] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[7][8] & next (shift) = "U" & board[7][8] = "warehouse_keeper"  : {"floor"};
    D_able[5][8] & next (shift) = "D" & board[5][8] = "warehouse_keeper" & board[6][8] = "box"  : {"box"};
    L_able[7][9] & next (shift) = "L" & board[7][9] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[7][8] & next (shift) = "R" & board[7][8] = "warehouse_keeper"  : {"floor"};
    L_able[7][10] & next (shift) = "L" & board[7][10] = "warehouse_keeper" & board[7][9] = "box"  : {"box"};
    R_able[7][7] & next (shift) = "R" & board[7][7] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[7][8] & next (shift) = "L" & board[7][8] = "warehouse_keeper"  : {"floor"};
    R_able[7][6] & next (shift) = "R" & board[7][6] = "warehouse_keeper" & board[7][7] = "box"  : {"box"};
TRUE : board[7][8];
esac;

next (board[7][9]) := case
    U_able[8][9] & next (shift) = "U" & board[8][9] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[7][9] & next (shift) = "D" & board[7][9] = "warehouse_keeper"  : {"floor"};
    U_able[9][9] & next (shift) = "U" & board[9][9] = "warehouse_keeper" & board[8][9] = "box"  : {"box"};
    L_able[7][10] & next (shift) = "L" & board[7][10] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[7][9] & next (shift) = "R" & board[7][9] = "warehouse_keeper"  : {"floor"};
    L_able[7][11] & next (shift) = "L" & board[7][11] = "warehouse_keeper" & board[7][10] = "box"  : {"box"};
    R_able[7][8] & next (shift) = "R" & board[7][8] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[7][9] & next (shift) = "L" & board[7][9] = "warehouse_keeper"  : {"floor"};
    R_able[7][7] & next (shift) = "R" & board[7][7] = "warehouse_keeper" & board[7][8] = "box"  : {"box"};
TRUE : board[7][9];
esac;

next (board[7][10]) := case
    L_able[7][11] & next (shift) = "L" & board[7][11] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[7][10] & next (shift) = "R" & board[7][10] = "warehouse_keeper"  : {"floor"};
    L_able[7][12] & next (shift) = "L" & board[7][12] = "warehouse_keeper" & board[7][11] = "box"  : {"box"};
    R_able[7][9] & next (shift) = "R" & board[7][9] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[7][10] & next (shift) = "L" & board[7][10] = "warehouse_keeper"  : {"floor"};
    R_able[7][8] & next (shift) = "R" & board[7][8] = "warehouse_keeper" & board[7][9] = "box"  : {"box"};
TRUE : board[7][10];
esac;

next (board[7][11]) := case
    U_able[8][11] & next (shift) = "U" & board[8][11] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[7][11] & next (shift) = "D" & board[7][11] = "warehouse_keeper"  : {"floor"};
    L_able[7][12] & next (shift) = "L" & board[7][12] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[7][11] & next (shift) = "R" & board[7][11] = "warehouse_keeper"  : {"floor"};
    L_able[7][13] & next (shift) = "L" & board[7][13] = "warehouse_keeper" & board[7][12] = "box"  : {"box"};
    R_able[7][10] & next (shift) = "R" & board[7][10] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[7][11] & next (shift) = "L" & board[7][11] = "warehouse_keeper"  : {"floor"};
    R_able[7][9] & next (shift) = "R" & board[7][9] = "warehouse_keeper" & board[7][10] = "box"  : {"box"};
TRUE : board[7][11];
esac;

next (board[7][12]) := case
    L_able[7][13] & next (shift) = "L" & board[7][13] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[7][12] & next (shift) = "R" & board[7][12] = "warehouse_keeper"  : {"floor"};
    L_able[7][14] & next (shift) = "L" & board[7][14] = "warehouse_keeper" & board[7][13] = "box"  : {"box"};
    R_able[7][11] & next (shift) = "R" & board[7][11] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[7][12] & next (shift) = "L" & board[7][12] = "warehouse_keeper"  : {"floor"};
    R_able[7][10] & next (shift) = "R" & board[7][10] = "warehouse_keeper" & board[7][11] = "box"  : {"box"};
TRUE : board[7][12];
esac;

next (board[7][13]) := case
    L_able[7][14] & next (shift) = "L" & board[7][14] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[7][13] & next (shift) = "R" & board[7][13] = "warehouse_keeper"  : {"floor"};
    L_able[7][15] & next (shift) = "L" & board[7][15] = "warehouse_keeper" & board[7][14] = "box"  : {"box"};
    R_able[7][12] & next (shift) = "R" & board[7][12] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[7][13] & next (shift) = "L" & board[7][13] = "warehouse_keeper"  : {"floor"};
    R_able[7][11] & next (shift) = "R" & board[7][11] = "warehouse_keeper" & board[7][12] = "box"  : {"box"};
TRUE : board[7][13];
esac;

next (board[7][14]) := case
    U_able[8][14] & next (shift) = "U" & board[8][14] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[7][14] & next (shift) = "D" & board[7][14] = "warehouse_keeper"  : {"floor"};
    D_able[6][14] & next (shift) = "D" & board[6][14] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[7][14] & next (shift) = "U" & board[7][14] = "warehouse_keeper"  : {"floor"};
    L_able[7][15] & next (shift) = "L" & board[7][15] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[7][14] & next (shift) = "R" & board[7][14] = "warehouse_keeper"  : {"floor"};
    L_able[7][16] & next (shift) = "L" & board[7][16] = "warehouse_keeper_on_goal" & board[7][15] = "box"  : {"box"};
    R_able[7][13] & next (shift) = "R" & board[7][13] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[7][14] & next (shift) = "L" & board[7][14] = "warehouse_keeper"  : {"floor"};
    R_able[7][12] & next (shift) = "R" & board[7][12] = "warehouse_keeper" & board[7][13] = "box"  : {"box"};
TRUE : board[7][14];
esac;

next (board[7][15]) := case
    U_able[8][15] & next (shift) = "U" & board[8][15] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[7][15] & next (shift) = "D" & board[7][15] = "warehouse_keeper"  : {"floor"};
    D_able[6][15] & next (shift) = "D" & board[6][15] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[7][15] & next (shift) = "U" & board[7][15] = "warehouse_keeper"  : {"floor"};
    L_able[7][16] & next (shift) = "L" & board[7][16] = "warehouse_keeper_on_goal"  : {"warehouse_keeper"};
    R_able[7][15] & next (shift) = "R" & board[7][15] = "warehouse_keeper"  : {"floor"};
    L_able[7][17] & next (shift) = "L" & board[7][17] = "warehouse_keeper_on_goal" & board[7][16] = "box_on_goal"  : {"box"};
    R_able[7][14] & next (shift) = "R" & board[7][14] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[7][15] & next (shift) = "L" & board[7][15] = "warehouse_keeper"  : {"floor"};
    R_able[7][13] & next (shift) = "R" & board[7][13] = "warehouse_keeper" & board[7][14] = "box"  : {"box"};
TRUE : board[7][15];
esac;

next (board[8][5]) := case
    U_able[9][5] & next (shift) = "U" & board[9][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[8][5] & next (shift) = "D" & board[8][5] = "warehouse_keeper"  : {"floor"};
    D_able[7][5] & next (shift) = "D" & board[7][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[8][5] & next (shift) = "U" & board[8][5] = "warehouse_keeper"  : {"floor"};
    D_able[6][5] & next (shift) = "D" & board[6][5] = "warehouse_keeper" & board[7][5] = "box"  : {"box"};
TRUE : board[8][5];
esac;

next (board[8][9]) := case
    U_able[9][9] & next (shift) = "U" & board[9][9] = "warehouse_keeper"  : {"warehouse_keeper"};
    D_able[8][9] & next (shift) = "D" & board[8][9] = "warehouse_keeper"  : {"floor"};
    D_able[7][9] & next (shift) = "D" & board[7][9] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[8][9] & next (shift) = "U" & board[8][9] = "warehouse_keeper"  : {"floor"};
TRUE : board[8][9];
esac;

next (board[8][11]) := case
    D_able[7][11] & next (shift) = "D" & board[7][11] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[8][11] & next (shift) = "U" & board[8][11] = "warehouse_keeper"  : {"floor"};
TRUE : board[8][11];
esac;

next (board[8][14]) := case
    D_able[7][14] & next (shift) = "D" & board[7][14] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[8][14] & next (shift) = "U" & board[8][14] = "warehouse_keeper"  : {"floor"};
    D_able[6][14] & next (shift) = "D" & board[6][14] = "warehouse_keeper" & board[7][14] = "box"  : {"box"};
    L_able[8][15] & next (shift) = "L" & board[8][15] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[8][14] & next (shift) = "R" & board[8][14] = "warehouse_keeper"  : {"floor"};
    L_able[8][16] & next (shift) = "L" & board[8][16] = "warehouse_keeper_on_goal" & board[8][15] = "box"  : {"box"};
TRUE : board[8][14];
esac;

next (board[8][15]) := case
    D_able[7][15] & next (shift) = "D" & board[7][15] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[8][15] & next (shift) = "U" & board[8][15] = "warehouse_keeper"  : {"floor"};
    D_able[6][15] & next (shift) = "D" & board[6][15] = "warehouse_keeper" & board[7][15] = "box"  : {"box"};
    L_able[8][16] & next (shift) = "L" & board[8][16] = "warehouse_keeper_on_goal"  : {"warehouse_keeper"};
    R_able[8][15] & next (shift) = "R" & board[8][15] = "warehouse_keeper"  : {"floor"};
    L_able[8][17] & next (shift) = "L" & board[8][17] = "warehouse_keeper_on_goal" & board[8][16] = "box_on_goal"  : {"box"};
    R_able[8][14] & next (shift) = "R" & board[8][14] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[8][15] & next (shift) = "L" & board[8][15] = "warehouse_keeper"  : {"floor"};
TRUE : board[8][15];
esac;

next (board[9][5]) := case
    D_able[8][5] & next (shift) = "D" & board[8][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[9][5] & next (shift) = "U" & board[9][5] = "warehouse_keeper"  : {"floor"};
    D_able[7][5] & next (shift) = "D" & board[7][5] = "warehouse_keeper" & board[8][5] = "box"  : {"box"};
    L_able[9][6] & next (shift) = "L" & board[9][6] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[9][5] & next (shift) = "R" & board[9][5] = "warehouse_keeper"  : {"floor"};
    L_able[9][7] & next (shift) = "L" & board[9][7] = "warehouse_keeper" & board[9][6] = "box"  : {"box"};
TRUE : board[9][5];
esac;

next (board[9][6]) := case
    L_able[9][7] & next (shift) = "L" & board[9][7] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[9][6] & next (shift) = "R" & board[9][6] = "warehouse_keeper"  : {"floor"};
    L_able[9][8] & next (shift) = "L" & board[9][8] = "warehouse_keeper" & board[9][7] = "box"  : {"box"};
    R_able[9][5] & next (shift) = "R" & board[9][5] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[9][6] & next (shift) = "L" & board[9][6] = "warehouse_keeper"  : {"floor"};
TRUE : board[9][6];
esac;

next (board[9][7]) := case
    L_able[9][8] & next (shift) = "L" & board[9][8] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[9][7] & next (shift) = "R" & board[9][7] = "warehouse_keeper"  : {"floor"};
    L_able[9][9] & next (shift) = "L" & board[9][9] = "warehouse_keeper" & board[9][8] = "box"  : {"box"};
    R_able[9][6] & next (shift) = "R" & board[9][6] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[9][7] & next (shift) = "L" & board[9][7] = "warehouse_keeper"  : {"floor"};
    R_able[9][5] & next (shift) = "R" & board[9][5] = "warehouse_keeper" & board[9][6] = "box"  : {"box"};
TRUE : board[9][7];
esac;

next (board[9][8]) := case
    L_able[9][9] & next (shift) = "L" & board[9][9] = "warehouse_keeper"  : {"warehouse_keeper"};
    R_able[9][8] & next (shift) = "R" & board[9][8] = "warehouse_keeper"  : {"floor"};
    R_able[9][7] & next (shift) = "R" & board[9][7] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[9][8] & next (shift) = "L" & board[9][8] = "warehouse_keeper"  : {"floor"};
    R_able[9][6] & next (shift) = "R" & board[9][6] = "warehouse_keeper" & board[9][7] = "box"  : {"box"};
TRUE : board[9][8];
esac;

next (board[9][9]) := case
    D_able[8][9] & next (shift) = "D" & board[8][9] = "warehouse_keeper"  : {"warehouse_keeper"};
    U_able[9][9] & next (shift) = "U" & board[9][9] = "warehouse_keeper"  : {"floor"};
    D_able[7][9] & next (shift) = "D" & board[7][9] = "warehouse_keeper" & board[8][9] = "box"  : {"box"};
    R_able[9][8] & next (shift) = "R" & board[9][8] = "warehouse_keeper"  : {"warehouse_keeper"};
    L_able[9][9] & next (shift) = "L" & board[9][9] = "warehouse_keeper"  : {"floor"};
    R_able[9][7] & next (shift) = "R" & board[9][7] = "warehouse_keeper" & board[9][8] = "box"  : {"box"};
TRUE : board[9][9];
esac;



-- Define the goal

next (board[6][16]) := case
    U_able[7][16] & next (shift) = "U" & board[7][16] = "warehouse_keeper_on_goal"  : {"warehouse_keeper_on_goal"};
    D_able[6][16] & next (shift) = "D" & board[6][16] = "warehouse_keeper_on_goal"  : {"goal"};
    U_able[8][16] & next (shift) = "U" & board[8][16] = "warehouse_keeper_on_goal" & board[7][16] = "box_on_goal"  : {"box_on_goal"};
    L_able[6][17] & next (shift) = "L" & board[6][17] = "warehouse_keeper_on_goal"  : {"warehouse_keeper_on_goal"};
    R_able[6][16] & next (shift) = "R" & board[6][16] = "warehouse_keeper_on_goal"  : {"goal"};
    R_able[6][15] & next (shift) = "R" & board[6][15] = "warehouse_keeper"  : {"warehouse_keeper_on_goal"};
    L_able[6][16] & next (shift) = "L" & board[6][16] = "warehouse_keeper_on_goal"  : {"goal"};
    R_able[6][14] & next (shift) = "R" & board[6][14] = "warehouse_keeper" & board[6][15] = "box"  : {"box_on_goal"};
TRUE : board[6][16];
esac;

next (board[6][17]) := case
    U_able[7][17] & next (shift) = "U" & board[7][17] = "warehouse_keeper_on_goal"  : {"warehouse_keeper_on_goal"};
    D_able[6][17] & next (shift) = "D" & board[6][17] = "warehouse_keeper_on_goal"  : {"goal"};
    U_able[8][17] & next (shift) = "U" & board[8][17] = "warehouse_keeper_on_goal" & board[7][17] = "box_on_goal"  : {"box_on_goal"};
    R_able[6][16] & next (shift) = "R" & board[6][16] = "warehouse_keeper_on_goal"  : {"warehouse_keeper_on_goal"};
    L_able[6][17] & next (shift) = "L" & board[6][17] = "warehouse_keeper_on_goal"  : {"goal"};
    R_able[6][15] & next (shift) = "R" & board[6][15] = "warehouse_keeper" & board[6][16] = "box_on_goal"  : {"box_on_goal"};
TRUE : board[6][17];
esac;

next (board[7][16]) := case
    U_able[8][16] & next (shift) = "U" & board[8][16] = "warehouse_keeper_on_goal"  : {"warehouse_keeper_on_goal"};
    D_able[7][16] & next (shift) = "D" & board[7][16] = "warehouse_keeper_on_goal"  : {"goal"};
    D_able[6][16] & next (shift) = "D" & board[6][16] = "warehouse_keeper_on_goal"  : {"warehouse_keeper_on_goal"};
    U_able[7][16] & next (shift) = "U" & board[7][16] = "warehouse_keeper_on_goal"  : {"goal"};
    L_able[7][17] & next (shift) = "L" & board[7][17] = "warehouse_keeper_on_goal"  : {"warehouse_keeper_on_goal"};
    R_able[7][16] & next (shift) = "R" & board[7][16] = "warehouse_keeper_on_goal"  : {"goal"};
    R_able[7][15] & next (shift) = "R" & board[7][15] = "warehouse_keeper"  : {"warehouse_keeper_on_goal"};
    L_able[7][16] & next (shift) = "L" & board[7][16] = "warehouse_keeper_on_goal"  : {"goal"};
    R_able[7][14] & next (shift) = "R" & board[7][14] = "warehouse_keeper" & board[7][15] = "box"  : {"box_on_goal"};
TRUE : board[7][16];
esac;

next (board[7][17]) := case
    U_able[8][17] & next (shift) = "U" & board[8][17] = "warehouse_keeper_on_goal"  : {"warehouse_keeper_on_goal"};
    D_able[7][17] & next (shift) = "D" & board[7][17] = "warehouse_keeper_on_goal"  : {"goal"};
    D_able[6][17] & next (shift) = "D" & board[6][17] = "warehouse_keeper_on_goal"  : {"warehouse_keeper_on_goal"};
    U_able[7][17] & next (shift) = "U" & board[7][17] = "warehouse_keeper_on_goal"  : {"goal"};
    R_able[7][16] & next (shift) = "R" & board[7][16] = "warehouse_keeper_on_goal"  : {"warehouse_keeper_on_goal"};
    L_able[7][17] & next (shift) = "L" & board[7][17] = "warehouse_keeper_on_goal"  : {"goal"};
    R_able[7][15] & next (shift) = "R" & board[7][15] = "warehouse_keeper" & board[7][16] = "box_on_goal"  : {"box_on_goal"};
TRUE : board[7][17];
esac;

next (board[8][16]) := case
    D_able[7][16] & next (shift) = "D" & board[7][16] = "warehouse_keeper_on_goal"  : {"warehouse_keeper_on_goal"};
    U_able[8][16] & next (shift) = "U" & board[8][16] = "warehouse_keeper_on_goal"  : {"goal"};
    D_able[6][16] & next (shift) = "D" & board[6][16] = "warehouse_keeper_on_goal" & board[7][16] = "box_on_goal"  : {"box_on_goal"};
    L_able[8][17] & next (shift) = "L" & board[8][17] = "warehouse_keeper_on_goal"  : {"warehouse_keeper_on_goal"};
    R_able[8][16] & next (shift) = "R" & board[8][16] = "warehouse_keeper_on_goal"  : {"goal"};
    R_able[8][15] & next (shift) = "R" & board[8][15] = "warehouse_keeper"  : {"warehouse_keeper_on_goal"};
    L_able[8][16] & next (shift) = "L" & board[8][16] = "warehouse_keeper_on_goal"  : {"goal"};
    R_able[8][14] & next (shift) = "R" & board[8][14] = "warehouse_keeper" & board[8][15] = "box"  : {"box_on_goal"};
TRUE : board[8][16];
esac;

next (board[8][17]) := case
    D_able[7][17] & next (shift) = "D" & board[7][17] = "warehouse_keeper_on_goal"  : {"warehouse_keeper_on_goal"};
    U_able[8][17] & next (shift) = "U" & board[8][17] = "warehouse_keeper_on_goal"  : {"goal"};
    D_able[6][17] & next (shift) = "D" & board[6][17] = "warehouse_keeper_on_goal" & board[7][17] = "box_on_goal"  : {"box_on_goal"};
    R_able[8][16] & next (shift) = "R" & board[8][16] = "warehouse_keeper_on_goal"  : {"warehouse_keeper_on_goal"};
    L_able[8][17] & next (shift) = "L" & board[8][17] = "warehouse_keeper_on_goal"  : {"goal"};
    R_able[8][15] & next (shift) = "R" & board[8][15] = "warehouse_keeper" & board[8][16] = "box_on_goal"  : {"box_on_goal"};
TRUE : board[8][17];
esac;

JUSTICE
!(board[1][5] = "box") &
 !(board[1][7] = "box") &
 !(board[4][3] = "box") &
 !(board[4][8] = "box") &
 !(board[6][1] = "box") &
 !(board[6][14] = "box") &
 !(board[7][1] = "box") &
 !(board[8][11] = "box") &
 !(board[8][14] = "box") &
 !(board[9][5] = "box") &
 !(board[9][9] = "box") &
 !(board[1][6] = "box") &
 !(board[9][6] = "box") &
 !(board[9][7] = "box") &
 !(board[9][8] = "box") &
 !(board[1][5] = "box" & board[1][6] = "box") &
 !(board[1][5] = "box" & board[2][5] = "box") &
 !(board[1][6] = "box" & board[1][7] = "box") &
 !(board[1][7] = "box" & board[2][7] = "box") &
 !(board[2][5] = "box" & board[3][5] = "box") &
 !(board[2][7] = "box" & board[3][7] = "box") &
 !(board[4][3] = "box" & board[4][4] = "box") &
 !(board[4][3] = "box" & board[5][3] = "box") &
 !(board[4][6] = "box" & board[4][7] = "box") &
 !(board[4][8] = "box" & board[5][8] = "box") &
 !(board[5][3] = "box" & board[6][3] = "box") &
 !(board[5][5] = "box" & board[6][5] = "box") &
 !(board[5][8] = "box" & board[6][8] = "box") &
 !(board[6][1] = "box" & board[6][2] = "box") &
 !(board[6][1] = "box" & board[7][1] = "box") &
 !(board[6][14] = "box" & board[6][15] = "box") &
 !(board[6][15] = "box" & board[6][16] = "box") &
 !(board[7][1] = "box" & board[7][2] = "box") &
 !(board[7][2] = "box" & board[7][3] = "box") &
 !(board[7][3] = "box" & board[7][4] = "box") &
 !(board[7][6] = "box" & board[7][7] = "box") &
 !(board[7][7] = "box" & board[7][8] = "box") &
 !(board[7][9] = "box" & board[7][10] = "box") &
 !(board[7][10] = "box" & board[7][11] = "box") &
 !(board[7][11] = "box" & board[7][12] = "box") &
 !(board[7][12] = "box" & board[7][13] = "box") &
 !(board[8][5] = "box" & board[9][5] = "box") &
 !(board[8][9] = "box" & board[9][9] = "box") &
 !(board[8][14] = "box" & board[8][15] = "box") &
 !(board[8][15] = "box" & board[8][16] = "box") &
 !(board[9][5] = "box" & board[9][6] = "box") &
 !(board[9][6] = "box" & board[9][7] = "box") &
 !(board[9][7] = "box" & board[9][8] = "box") &
!(board[9][8] = "box" & board[9][9] = "box");

LTLSPEC ! F solve
